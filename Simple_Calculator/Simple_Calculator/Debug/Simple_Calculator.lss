
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001050  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00001050  000010c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000175f  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009df  00000000  00000000  000029f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000db3  00000000  00000000  000033d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e4  00000000  00000000  0000418c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ee  00000000  00000000  00004470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001554  00000000  00000000  00004a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00005fb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 0d 03 	call	0x61a	; 0x61a <main>
      7a:	0c 94 26 08 	jmp	0x104c	; 0x104c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEY_VoidInit>:
};
	
void KEY_VoidInit(void)
{
		//Setting Rows to Input Pullup
	DIO_setPinDirection(ROWS_PORT,KPD_R1_PIN,DIO_INITIAL_OUTPUT);
      82:	41 e0       	ldi	r20, 0x01	; 1
      84:	65 e0       	ldi	r22, 0x05	; 5
      86:	82 e0       	ldi	r24, 0x02	; 2
      88:	0e 94 23 04 	call	0x846	; 0x846 <DIO_setPinDirection>
	DIO_setPinDirection(ROWS_PORT,KPD_R2_PIN,DIO_INITIAL_OUTPUT);
      8c:	41 e0       	ldi	r20, 0x01	; 1
      8e:	64 e0       	ldi	r22, 0x04	; 4
      90:	82 e0       	ldi	r24, 0x02	; 2
      92:	0e 94 23 04 	call	0x846	; 0x846 <DIO_setPinDirection>
	DIO_setPinDirection(ROWS_PORT,KPD_R3_PIN,DIO_INITIAL_OUTPUT);
      96:	41 e0       	ldi	r20, 0x01	; 1
      98:	63 e0       	ldi	r22, 0x03	; 3
      9a:	82 e0       	ldi	r24, 0x02	; 2
      9c:	0e 94 23 04 	call	0x846	; 0x846 <DIO_setPinDirection>
	DIO_setPinDirection(ROWS_PORT,KPD_R4_PIN,DIO_INITIAL_OUTPUT);
      a0:	41 e0       	ldi	r20, 0x01	; 1
      a2:	62 e0       	ldi	r22, 0x02	; 2
      a4:	82 e0       	ldi	r24, 0x02	; 2
      a6:	0e 94 23 04 	call	0x846	; 0x846 <DIO_setPinDirection>
	
	DIO_setPinValue(ROWS_PORT,KPD_R1_PIN,DIO_INITIAL_OUTPUT_HIGH);
      aa:	41 e0       	ldi	r20, 0x01	; 1
      ac:	65 e0       	ldi	r22, 0x05	; 5
      ae:	82 e0       	ldi	r24, 0x02	; 2
      b0:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	DIO_setPinValue(ROWS_PORT,KPD_R2_PIN,DIO_INITIAL_OUTPUT_HIGH);
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	64 e0       	ldi	r22, 0x04	; 4
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	DIO_setPinValue(ROWS_PORT,KPD_R3_PIN,DIO_INITIAL_OUTPUT_HIGH);
      be:	41 e0       	ldi	r20, 0x01	; 1
      c0:	63 e0       	ldi	r22, 0x03	; 3
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	DIO_setPinValue(ROWS_PORT,KPD_R4_PIN,DIO_INITIAL_OUTPUT_HIGH);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	62 e0       	ldi	r22, 0x02	; 2
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	//Setting Columns to Output High
	DIO_setPinDirection(COLS_PORT,KPD_C1_PIN,DIO_INITIAL_INPUT);
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	0e 94 23 04 	call	0x846	; 0x846 <DIO_setPinDirection>
	DIO_setPinDirection(COLS_PORT,KPD_C2_PIN,DIO_INITIAL_INPUT);
      dc:	40 e0       	ldi	r20, 0x00	; 0
      de:	66 e0       	ldi	r22, 0x06	; 6
      e0:	83 e0       	ldi	r24, 0x03	; 3
      e2:	0e 94 23 04 	call	0x846	; 0x846 <DIO_setPinDirection>
	DIO_setPinDirection(COLS_PORT,KPD_C3_PIN,DIO_INITIAL_INPUT);
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	65 e0       	ldi	r22, 0x05	; 5
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	0e 94 23 04 	call	0x846	; 0x846 <DIO_setPinDirection>
	DIO_setPinDirection(COLS_PORT,KPD_C4_PIN,DIO_INITIAL_INPUT);
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	63 e0       	ldi	r22, 0x03	; 3
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	0e 94 23 04 	call	0x846	; 0x846 <DIO_setPinDirection>
	
    DIO_setPinValue(COLS_PORT,KPD_C1_PIN,DIO_INITIAL_INPUT_PULLUP);
      fa:	41 e0       	ldi	r20, 0x01	; 1
      fc:	67 e0       	ldi	r22, 0x07	; 7
      fe:	83 e0       	ldi	r24, 0x03	; 3
     100:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
    DIO_setPinValue(COLS_PORT,KPD_C2_PIN,DIO_INITIAL_INPUT_PULLUP);
     104:	41 e0       	ldi	r20, 0x01	; 1
     106:	66 e0       	ldi	r22, 0x06	; 6
     108:	83 e0       	ldi	r24, 0x03	; 3
     10a:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
    DIO_setPinValue(COLS_PORT,KPD_C3_PIN,DIO_INITIAL_INPUT_PULLUP);
     10e:	41 e0       	ldi	r20, 0x01	; 1
     110:	65 e0       	ldi	r22, 0x05	; 5
     112:	83 e0       	ldi	r24, 0x03	; 3
     114:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
    DIO_setPinValue(COLS_PORT,KPD_C4_PIN,DIO_INITIAL_INPUT_PULLUP);
     118:	41 e0       	ldi	r20, 0x01	; 1
     11a:	63 e0       	ldi	r22, 0x03	; 3
     11c:	83 e0       	ldi	r24, 0x03	; 3
     11e:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
     122:	08 95       	ret

00000124 <Key_U8PressedKey>:


}
uint8 Key_U8PressedKey()
{
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	61 97       	sbiw	r28, 0x11	; 17
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	de bf       	out	0x3e, r29	; 62
     142:	0f be       	out	0x3f, r0	; 63
     144:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8PressedSwitch = KEYPAD_NOT_PRESSED;
	uint8 Local_u8aKeyPadMap[KEYPAD_ROWS_NO][KEYPAD_COLUMNS_NO] = KPD_KEYS;
     146:	80 e1       	ldi	r24, 0x10	; 16
     148:	e8 e6       	ldi	r30, 0x68	; 104
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	de 01       	movw	r26, r28
     14e:	11 96       	adiw	r26, 0x01	; 1
     150:	01 90       	ld	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	8a 95       	dec	r24
     156:	e1 f7       	brne	.-8      	; 0x150 <Key_U8PressedKey+0x2c>
	uint8 Local_u8CurrentCol;
	uint8 Local_u8CurrentRow;
	uint8 Local_u8CurrentStatus;

		for (Local_u8CurrentRow = 0 ;Local_u8CurrentRow < KEYPAD_ROWS_NO ;Local_u8CurrentRow++)
     158:	00 e0       	ldi	r16, 0x00	; 0


}
uint8 Key_U8PressedKey()
{
	uint8 Local_u8PressedSwitch = KEYPAD_NOT_PRESSED;
     15a:	bb 24       	eor	r11, r11
     15c:	ba 94       	dec	r11
	uint8 Local_u8aKeyPadMap[KEYPAD_ROWS_NO][KEYPAD_COLUMNS_NO] = KPD_KEYS;
	uint8 Local_u8CurrentCol;
	uint8 Local_u8CurrentRow;
	uint8 Local_u8CurrentStatus;

		for (Local_u8CurrentRow = 0 ;Local_u8CurrentRow < KEYPAD_ROWS_NO ;Local_u8CurrentRow++)
     15e:	3f c0       	rjmp	.+126    	; 0x1de <Key_U8PressedKey+0xba>

	{
		DIO_setPinValue(ROWS_PORT,ROW_ARR[Local_u8CurrentRow],DIO_PIN_LOW);
     160:	c0 2e       	mov	r12, r16
     162:	d1 2c       	mov	r13, r1
     164:	f6 01       	movw	r30, r12
     166:	e0 5a       	subi	r30, 0xA0	; 160
     168:	ff 4f       	sbci	r31, 0xFF	; 255
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	60 81       	ld	r22, Z
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	for (Local_u8CurrentCol = 0;Local_u8CurrentCol < KEYPAD_COLUMNS_NO ;Local_u8CurrentCol++)
     174:	10 e0       	ldi	r17, 0x00	; 0
     176:	28 c0       	rjmp	.+80     	; 0x1c8 <Key_U8PressedKey+0xa4>

		{
			DIO_getPinValue(COLS_PORT,COL_ARR[Local_u8CurrentCol] , &Local_u8CurrentStatus);
     178:	e1 2e       	mov	r14, r17
     17a:	f1 2c       	mov	r15, r1
     17c:	f7 01       	movw	r30, r14
     17e:	ec 59       	subi	r30, 0x9C	; 156
     180:	ff 4f       	sbci	r31, 0xFF	; 255
     182:	ae 01       	movw	r20, r28
     184:	4f 5e       	subi	r20, 0xEF	; 239
     186:	5f 4f       	sbci	r21, 0xFF	; 255
     188:	60 81       	ld	r22, Z
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	0e 94 06 05 	call	0xa0c	; 0xa0c <DIO_getPinValue>
			/*If Switch is pressed */
			if (Local_u8CurrentStatus == DIO_PIN_LOW   ) //as pin is pull up
     190:	89 89       	ldd	r24, Y+17	; 0x11
     192:	81 11       	cpse	r24, r1
     194:	18 c0       	rjmp	.+48     	; 0x1c6 <Key_U8PressedKey+0xa2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     196:	83 e2       	ldi	r24, 0x23	; 35
     198:	94 ef       	ldi	r25, 0xF4	; 244
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <Key_U8PressedKey+0x76>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <Key_U8PressedKey+0x7c>
     1a0:	00 00       	nop
			{  
				_delay_ms(250);
				/*Wait For Debouncing*/
				/*If Switch is pressed */
			if (Local_u8CurrentStatus == DIO_PIN_LOW ) //as pin is pull up
     1a2:	89 89       	ldd	r24, Y+17	; 0x11
     1a4:	81 11       	cpse	r24, r1
     1a6:	0f c0       	rjmp	.+30     	; 0x1c6 <Key_U8PressedKey+0xa2>
				{
			Local_u8PressedSwitch = Local_u8aKeyPadMap[Local_u8CurrentRow][Local_u8CurrentCol];
     1a8:	c6 01       	movw	r24, r12
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	88 0f       	add	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	2c 0f       	add	r18, r28
     1b8:	3d 1f       	adc	r19, r29
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 0d       	add	r30, r14
     1c2:	ff 1d       	adc	r31, r15
     1c4:	b0 80       	ld	r11, Z

		for (Local_u8CurrentRow = 0 ;Local_u8CurrentRow < KEYPAD_ROWS_NO ;Local_u8CurrentRow++)

	{
		DIO_setPinValue(ROWS_PORT,ROW_ARR[Local_u8CurrentRow],DIO_PIN_LOW);
	for (Local_u8CurrentCol = 0;Local_u8CurrentCol < KEYPAD_COLUMNS_NO ;Local_u8CurrentCol++)
     1c6:	1f 5f       	subi	r17, 0xFF	; 255
     1c8:	14 30       	cpi	r17, 0x04	; 4
     1ca:	b0 f2       	brcs	.-84     	; 0x178 <Key_U8PressedKey+0x54>

				}
			}
		}
		/*Deactivate the column*/
		DIO_setPinValue(ROWS_PORT,ROW_ARR[Local_u8CurrentRow],DIO_PIN_HIGH);
     1cc:	f6 01       	movw	r30, r12
     1ce:	e0 5a       	subi	r30, 0xA0	; 160
     1d0:	ff 4f       	sbci	r31, 0xFF	; 255
     1d2:	41 e0       	ldi	r20, 0x01	; 1
     1d4:	60 81       	ld	r22, Z
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	uint8 Local_u8aKeyPadMap[KEYPAD_ROWS_NO][KEYPAD_COLUMNS_NO] = KPD_KEYS;
	uint8 Local_u8CurrentCol;
	uint8 Local_u8CurrentRow;
	uint8 Local_u8CurrentStatus;

		for (Local_u8CurrentRow = 0 ;Local_u8CurrentRow < KEYPAD_ROWS_NO ;Local_u8CurrentRow++)
     1dc:	0f 5f       	subi	r16, 0xFF	; 255
     1de:	04 30       	cpi	r16, 0x04	; 4
     1e0:	08 f4       	brcc	.+2      	; 0x1e4 <Key_U8PressedKey+0xc0>
     1e2:	be cf       	rjmp	.-132    	; 0x160 <Key_U8PressedKey+0x3c>
		/*Deactivate the column*/
		DIO_setPinValue(ROWS_PORT,ROW_ARR[Local_u8CurrentRow],DIO_PIN_HIGH);

	}
	return Local_u8PressedSwitch ;
     1e4:	8b 2d       	mov	r24, r11
     1e6:	61 96       	adiw	r28, 0x11	; 17
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	bf 90       	pop	r11
     204:	08 95       	ret

00000206 <private_voidWriteHalfPort>:
}



static void private_voidWriteHalfPort(uint8 copy_u8Value)
{
     206:	cf 93       	push	r28
     208:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_DATA_PORT,LCD_D4_Pin,GET_BIT(copy_u8Value,0));
     20a:	48 2f       	mov	r20, r24
     20c:	41 70       	andi	r20, 0x01	; 1
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	DIO_setPinValue(LCD_DATA_PORT,LCD_D5_Pin,GET_BIT(copy_u8Value,1));
     216:	c1 fb       	bst	r28, 1
     218:	44 27       	eor	r20, r20
     21a:	40 f9       	bld	r20, 0
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	DIO_setPinValue(LCD_DATA_PORT,LCD_D6_Pin,GET_BIT(copy_u8Value,2));
     224:	c2 fb       	bst	r28, 2
     226:	44 27       	eor	r20, r20
     228:	40 f9       	bld	r20, 0
     22a:	62 e0       	ldi	r22, 0x02	; 2
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	DIO_setPinValue(LCD_DATA_PORT,LCD_D7_Pin,GET_BIT(copy_u8Value,3));
     232:	c3 fb       	bst	r28, 3
     234:	44 27       	eor	r20, r20
     236:	40 f9       	bld	r20, 0
     238:	64 e0       	ldi	r22, 0x04	; 4
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
}
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <LCD_Write_CMD>:
	
	// Set Entry Mode
	LCD_Write_CMD(0b00000110);	
}

void LCD_Write_CMD(uint8 CMD){
     244:	cf 93       	push	r28
     246:	c8 2f       	mov	r28, r24
	
	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_CMD_PORT,RS_PIN,DIO_PIN_LOW);
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	63 e0       	ldi	r22, 0x03	; 3
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>

	// Write The Most 4 bits Of command on Data Pins
	private_voidWriteHalfPort(CMD>>4);
     252:	8c 2f       	mov	r24, r28
     254:	82 95       	swap	r24
     256:	8f 70       	andi	r24, 0x0F	; 15
     258:	0e 94 03 01 	call	0x206	; 0x206 <private_voidWriteHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
     266:	8f e9       	ldi	r24, 0x9F	; 159
     268:	9f e0       	ldi	r25, 0x0F	; 15
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_Write_CMD+0x26>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_Write_CMD+0x2c>
     270:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	62 e0       	ldi	r22, 0x02	; 2
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	
	// Write The Least 4 bits Of command on Data Pins
	private_voidWriteHalfPort(CMD);
     27c:	8c 2f       	mov	r24, r28
     27e:	0e 94 03 01 	call	0x206	; 0x206 <private_voidWriteHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	62 e0       	ldi	r22, 0x02	; 2
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
     28c:	8f e9       	ldi	r24, 0x9F	; 159
     28e:	9f e0       	ldi	r25, 0x0F	; 15
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LCD_Write_CMD+0x4c>
     294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_Write_CMD+0x52>
     296:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	62 e0       	ldi	r22, 0x02	; 2
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
}
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <LCD_init>:
     2a6:	2f e7       	ldi	r18, 0x7F	; 127
     2a8:	85 eb       	ldi	r24, 0xB5	; 181
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	21 50       	subi	r18, 0x01	; 1
     2ae:	80 40       	sbci	r24, 0x00	; 0
     2b0:	90 40       	sbci	r25, 0x00	; 0
     2b2:	e1 f7       	brne	.-8      	; 0x2ac <LCD_init+0x6>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_init+0x10>
     2b6:	00 00       	nop

void LCD_init(){
	_delay_ms(35);

	// set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_CMD_PORT,RS_PIN,DIO_PIN_LOW);
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	63 e0       	ldi	r22, 0x03	; 3
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	private_voidWriteHalfPort(0b0010);
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	0e 94 03 01 	call	0x206	; 0x206 <private_voidWriteHalfPort>
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
     2c8:	41 e0       	ldi	r20, 0x01	; 1
     2ca:	62 e0       	ldi	r22, 0x02	; 2
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
     2d2:	8f e9       	ldi	r24, 0x9F	; 159
     2d4:	9f e0       	ldi	r25, 0x0F	; 15
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_init+0x30>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_init+0x36>
     2dc:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	62 e0       	ldi	r22, 0x02	; 2
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	LCD_Write_CMD(0b00101000);
     2e8:	88 e2       	ldi	r24, 0x28	; 40
     2ea:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Write_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ee:	90 ef       	ldi	r25, 0xF0	; 240
     2f0:	9a 95       	dec	r25
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_init+0x4a>
	_delay_us(45);
	
	// Display on off Control (DisplayOn, Cursor on, Blink on)
	LCD_Write_CMD(0b00001111);
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Write_CMD>
     2fa:	20 ef       	ldi	r18, 0xF0	; 240
     2fc:	2a 95       	dec	r18
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_init+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     300:	8f e3       	ldi	r24, 0x3F	; 63
     302:	9f e1       	ldi	r25, 0x1F	; 31
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <LCD_init+0x5e>
     308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_init+0x64>
     30a:	00 00       	nop
	// Clear Display
	//LCD_Write_CMD(0b00000001);
	_delay_ms(2);
	
	// Set Entry Mode
	LCD_Write_CMD(0b00000110);	
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Write_CMD>
     312:	08 95       	ret

00000314 <LCD_Write_CHAR>:
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
}

void LCD_Write_CHAR(uint8 CHAR){
     314:	cf 93       	push	r28
     316:	c8 2f       	mov	r28, r24
	
	// set Rs pin = 1 (write data)
	DIO_setPinValue(LCD_CMD_PORT,RS_PIN,DIO_PIN_HIGH);
     318:	41 e0       	ldi	r20, 0x01	; 1
     31a:	63 e0       	ldi	r22, 0x03	; 3
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	
	// Write The Most 4 bits Of data on Data Pins
	private_voidWriteHalfPort(CHAR>>4);
     322:	8c 2f       	mov	r24, r28
     324:	82 95       	swap	r24
     326:	8f 70       	andi	r24, 0x0F	; 15
     328:	0e 94 03 01 	call	0x206	; 0x206 <private_voidWriteHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
     32c:	41 e0       	ldi	r20, 0x01	; 1
     32e:	62 e0       	ldi	r22, 0x02	; 2
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
     336:	8f e9       	ldi	r24, 0x9F	; 159
     338:	9f e0       	ldi	r25, 0x0F	; 15
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_Write_CHAR+0x26>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_Write_CHAR+0x2c>
     340:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	62 e0       	ldi	r22, 0x02	; 2
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
	
	// Write The Least 4 bits Of data on Data Pins
	private_voidWriteHalfPort(CHAR);
     34c:	8c 2f       	mov	r24, r28
     34e:	0e 94 03 01 	call	0x206	; 0x206 <private_voidWriteHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_HIGH);
     352:	41 e0       	ldi	r20, 0x01	; 1
     354:	62 e0       	ldi	r22, 0x02	; 2
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
     35c:	8f e9       	ldi	r24, 0x9F	; 159
     35e:	9f e0       	ldi	r25, 0x0F	; 15
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <LCD_Write_CHAR+0x4c>
     364:	00 c0       	rjmp	.+0      	; 0x366 <LCD_Write_CHAR+0x52>
     366:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT,E_PIN,DIO_PIN_LOW);
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	62 e0       	ldi	r22, 0x02	; 2
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 99 04 	call	0x932	; 0x932 <DIO_setPinValue>
}
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <LCD_GoTo>:


void LCD_GoTo(uint8 ROW, uint8 COL)
{
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <LCD_GoTo+0x6>
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
	uint8 Address[2] = {LCD_Line1_1stAddress, LCD_Line2_1stAddress};
     380:	90 e8       	ldi	r25, 0x80	; 128
     382:	99 83       	std	Y+1, r25	; 0x01
     384:	90 ec       	ldi	r25, 0xC0	; 192
     386:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Write_CMD(Address[ROW] + COL);
     388:	e1 e0       	ldi	r30, 0x01	; 1
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	ec 0f       	add	r30, r28
     38e:	fd 1f       	adc	r31, r29
     390:	e8 0f       	add	r30, r24
     392:	f1 1d       	adc	r31, r1
     394:	80 81       	ld	r24, Z
     396:	86 0f       	add	r24, r22
     398:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Write_CMD>
}
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <LCD_Clear>:


void LCD_Clear(void)
{
	LCD_Write_CMD(CMD_Clear_Display);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Write_CMD>
     3ac:	08 95       	ret

000003ae <LCD_WriteString>:
}

void LCD_WriteString(const uint8 * str){
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
	
	while( (*str) !='\0'){
     3b4:	03 c0       	rjmp	.+6      	; 0x3bc <LCD_WriteString+0xe>
		LCD_Write_CHAR(*str);
     3b6:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Write_CHAR>
		str++;
     3ba:	21 96       	adiw	r28, 0x01	; 1
	LCD_Write_CMD(CMD_Clear_Display);
}

void LCD_WriteString(const uint8 * str){
	
	while( (*str) !='\0'){
     3bc:	88 81       	ld	r24, Y
     3be:	81 11       	cpse	r24, r1
     3c0:	fa cf       	rjmp	.-12     	; 0x3b6 <LCD_WriteString+0x8>
		LCD_Write_CHAR(*str);
		str++;
		
	}	
}
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <LCD_WriteNUM>:

void LCD_WriteNUM(s64 NUM){
     3c8:	2f 92       	push	r2
     3ca:	3f 92       	push	r3
     3cc:	4f 92       	push	r4
     3ce:	5f 92       	push	r5
     3d0:	6f 92       	push	r6
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	60 97       	sbiw	r28, 0x10	; 16
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	29 83       	std	Y+1, r18	; 0x01
     3fe:	3a 83       	std	Y+2, r19	; 0x02
     400:	4b 83       	std	Y+3, r20	; 0x03
     402:	5c 83       	std	Y+4, r21	; 0x04
     404:	6d 83       	std	Y+5, r22	; 0x05
     406:	7e 83       	std	Y+6, r23	; 0x06
     408:	38 2e       	mov	r3, r24
     40a:	29 2e       	mov	r2, r25
	u64 Multiplier=1;
	
	if(NUM == 0){	LCD_Write_CHAR('0'); 	}
     40c:	a0 e0       	ldi	r26, 0x00	; 0
     40e:	0e 94 1a 08 	call	0x1034	; 0x1034 <__cmpdi2_s8>
     412:	21 f4       	brne	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     414:	80 e3       	ldi	r24, 0x30	; 48
     416:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Write_CHAR>
     41a:	e6 c0       	rjmp	.+460    	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
	
	else
	{
		if(NUM < 0) {	LCD_Write_CHAR('-');
     41c:	29 81       	ldd	r18, Y+1	; 0x01
     41e:	3a 81       	ldd	r19, Y+2	; 0x02
     420:	4b 81       	ldd	r20, Y+3	; 0x03
     422:	5c 81       	ldd	r21, Y+4	; 0x04
     424:	6d 81       	ldd	r22, Y+5	; 0x05
     426:	7e 81       	ldd	r23, Y+6	; 0x06
     428:	a0 e0       	ldi	r26, 0x00	; 0
     42a:	0e 94 1a 08 	call	0x1034	; 0x1034 <__cmpdi2_s8>
     42e:	ac f4       	brge	.+42     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     430:	8d e2       	ldi	r24, 0x2D	; 45
     432:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Write_CHAR>
		NUM *= -1;		 }
     436:	29 81       	ldd	r18, Y+1	; 0x01
     438:	3a 81       	ldd	r19, Y+2	; 0x02
     43a:	4b 81       	ldd	r20, Y+3	; 0x03
     43c:	5c 81       	ldd	r21, Y+4	; 0x04
     43e:	6d 81       	ldd	r22, Y+5	; 0x05
     440:	7e 81       	ldd	r23, Y+6	; 0x06
     442:	83 2d       	mov	r24, r3
     444:	92 2d       	mov	r25, r2
     446:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__negdi2>
     44a:	29 83       	std	Y+1, r18	; 0x01
     44c:	3a 83       	std	Y+2, r19	; 0x02
     44e:	4b 83       	std	Y+3, r20	; 0x03
     450:	5c 83       	std	Y+4, r21	; 0x04
     452:	6d 83       	std	Y+5, r22	; 0x05
     454:	7e 83       	std	Y+6, r23	; 0x06
     456:	38 2e       	mov	r3, r24
     458:	29 2e       	mov	r2, r25
		
		if(NUM > 0){
     45a:	29 81       	ldd	r18, Y+1	; 0x01
     45c:	3a 81       	ldd	r19, Y+2	; 0x02
     45e:	4b 81       	ldd	r20, Y+3	; 0x03
     460:	5c 81       	ldd	r21, Y+4	; 0x04
     462:	6d 81       	ldd	r22, Y+5	; 0x05
     464:	7e 81       	ldd	r23, Y+6	; 0x06
     466:	83 2d       	mov	r24, r3
     468:	92 2d       	mov	r25, r2
     46a:	a0 e0       	ldi	r26, 0x00	; 0
     46c:	0e 94 1a 08 	call	0x1034	; 0x1034 <__cmpdi2_s8>
     470:	09 f0       	breq	.+2      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     472:	94 f5       	brge	.+100    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     474:	b9 c0       	rjmp	.+370    	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
			
			while( (s64)(NUM/Multiplier) != 0){	Multiplier*=10;	}
     476:	2d 85       	ldd	r18, Y+13	; 0x0d
     478:	39 2d       	mov	r19, r9
     47a:	48 2d       	mov	r20, r8
     47c:	57 2d       	mov	r21, r7
     47e:	66 2d       	mov	r22, r6
     480:	75 2d       	mov	r23, r5
     482:	8e 85       	ldd	r24, Y+14	; 0x0e
     484:	94 2d       	mov	r25, r4
     486:	01 e0       	ldi	r16, 0x01	; 1
     488:	0e 94 f8 07 	call	0xff0	; 0xff0 <__ashldi3>
     48c:	82 2e       	mov	r8, r18
     48e:	93 2e       	mov	r9, r19
     490:	48 87       	std	Y+8, r20	; 0x08
     492:	5f 83       	std	Y+7, r21	; 0x07
     494:	b6 2f       	mov	r27, r22
     496:	a7 2f       	mov	r26, r23
     498:	f8 2f       	mov	r31, r24
     49a:	e9 2f       	mov	r30, r25
     49c:	02 e0       	ldi	r16, 0x02	; 2
     49e:	0e 94 f8 07 	call	0xff0	; 0xff0 <__ashldi3>
     4a2:	a2 2e       	mov	r10, r18
     4a4:	b3 2e       	mov	r11, r19
     4a6:	c4 2e       	mov	r12, r20
     4a8:	d5 2e       	mov	r13, r21
     4aa:	e6 2e       	mov	r14, r22
     4ac:	f7 2e       	mov	r15, r23
     4ae:	08 2f       	mov	r16, r24
     4b0:	19 2f       	mov	r17, r25
     4b2:	28 2d       	mov	r18, r8
     4b4:	39 2d       	mov	r19, r9
     4b6:	48 85       	ldd	r20, Y+8	; 0x08
     4b8:	5f 81       	ldd	r21, Y+7	; 0x07
     4ba:	6b 2f       	mov	r22, r27
     4bc:	7a 2f       	mov	r23, r26
     4be:	8f 2f       	mov	r24, r31
     4c0:	9e 2f       	mov	r25, r30
     4c2:	0e 94 11 08 	call	0x1022	; 0x1022 <__adddi3>
     4c6:	2d 87       	std	Y+13, r18	; 0x0d
     4c8:	93 2e       	mov	r9, r19
     4ca:	84 2e       	mov	r8, r20
     4cc:	75 2e       	mov	r7, r21
     4ce:	66 2e       	mov	r6, r22
     4d0:	57 2e       	mov	r5, r23
     4d2:	8e 87       	std	Y+14, r24	; 0x0e
     4d4:	49 2e       	mov	r4, r25
     4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	1f 82       	std	Y+7, r1	; 0x07
     4dc:	18 86       	std	Y+8, r1	; 0x08
     4de:	19 86       	std	Y+9, r1	; 0x09
     4e0:	1a 86       	std	Y+10, r1	; 0x0a
     4e2:	1b 86       	std	Y+11, r1	; 0x0b
     4e4:	1e 86       	std	Y+14, r1	; 0x0e
     4e6:	1c 86       	std	Y+12, r1	; 0x0c
     4e8:	8d 87       	std	Y+13, r24	; 0x0d
     4ea:	91 2c       	mov	r9, r1
     4ec:	81 2c       	mov	r8, r1
     4ee:	71 2c       	mov	r7, r1
     4f0:	61 2c       	mov	r6, r1
     4f2:	51 2c       	mov	r5, r1
     4f4:	41 2c       	mov	r4, r1
     4f6:	ad 84       	ldd	r10, Y+13	; 0x0d
     4f8:	b9 2c       	mov	r11, r9
     4fa:	c8 2c       	mov	r12, r8
     4fc:	d7 2c       	mov	r13, r7
     4fe:	e6 2c       	mov	r14, r6
     500:	f5 2c       	mov	r15, r5
     502:	0e 85       	ldd	r16, Y+14	; 0x0e
     504:	14 2d       	mov	r17, r4
     506:	29 81       	ldd	r18, Y+1	; 0x01
     508:	3a 81       	ldd	r19, Y+2	; 0x02
     50a:	4b 81       	ldd	r20, Y+3	; 0x03
     50c:	5c 81       	ldd	r21, Y+4	; 0x04
     50e:	6d 81       	ldd	r22, Y+5	; 0x05
     510:	7e 81       	ldd	r23, Y+6	; 0x06
     512:	83 2d       	mov	r24, r3
     514:	92 2d       	mov	r25, r2
     516:	0e 94 8b 07 	call	0xf16	; 0xf16 <__udivdi3>
     51a:	a0 e0       	ldi	r26, 0x00	; 0
     51c:	0e 94 1a 08 	call	0x1034	; 0x1034 <__cmpdi2_s8>
     520:	09 f0       	breq	.+2      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
     522:	a9 cf       	rjmp	.-174    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     524:	9f 82       	std	Y+7, r9	; 0x07
     526:	88 86       	std	Y+8, r8	; 0x08
     528:	79 86       	std	Y+9, r7	; 0x09
     52a:	6a 86       	std	Y+10, r6	; 0x0a
     52c:	5b 86       	std	Y+11, r5	; 0x0b
     52e:	4c 86       	std	Y+12, r4	; 0x0c

			do
			{
				Multiplier/=10;
     530:	0f 2e       	mov	r0, r31
     532:	fa e0       	ldi	r31, 0x0A	; 10
     534:	af 2e       	mov	r10, r31
     536:	f0 2d       	mov	r31, r0
     538:	b1 2c       	mov	r11, r1
     53a:	c1 2c       	mov	r12, r1
     53c:	d1 2c       	mov	r13, r1
     53e:	e1 2c       	mov	r14, r1
     540:	f1 2c       	mov	r15, r1
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	2d 85       	ldd	r18, Y+13	; 0x0d
     548:	3f 81       	ldd	r19, Y+7	; 0x07
     54a:	48 85       	ldd	r20, Y+8	; 0x08
     54c:	59 85       	ldd	r21, Y+9	; 0x09
     54e:	6a 85       	ldd	r22, Y+10	; 0x0a
     550:	7b 85       	ldd	r23, Y+11	; 0x0b
     552:	8e 85       	ldd	r24, Y+14	; 0x0e
     554:	9c 85       	ldd	r25, Y+12	; 0x0c
     556:	0e 94 8b 07 	call	0xf16	; 0xf16 <__udivdi3>
     55a:	42 2e       	mov	r4, r18
     55c:	53 2e       	mov	r5, r19
     55e:	64 2e       	mov	r6, r20
     560:	75 2e       	mov	r7, r21
     562:	86 2e       	mov	r8, r22
     564:	97 2e       	mov	r9, r23
     566:	88 8b       	std	Y+16, r24	; 0x10
     568:	9f 87       	std	Y+15, r25	; 0x0f
     56a:	2d 87       	std	Y+13, r18	; 0x0d
     56c:	3f 83       	std	Y+7, r19	; 0x07
     56e:	48 87       	std	Y+8, r20	; 0x08
     570:	59 87       	std	Y+9, r21	; 0x09
     572:	6a 87       	std	Y+10, r22	; 0x0a
     574:	7b 87       	std	Y+11, r23	; 0x0b
     576:	8e 87       	std	Y+14, r24	; 0x0e
     578:	9c 87       	std	Y+12, r25	; 0x0c
				LCD_Write_CHAR( NUM/Multiplier +'0');
     57a:	a2 2e       	mov	r10, r18
     57c:	b3 2e       	mov	r11, r19
     57e:	c4 2e       	mov	r12, r20
     580:	d5 2e       	mov	r13, r21
     582:	e6 2e       	mov	r14, r22
     584:	f7 2e       	mov	r15, r23
     586:	08 2f       	mov	r16, r24
     588:	19 2f       	mov	r17, r25
     58a:	29 81       	ldd	r18, Y+1	; 0x01
     58c:	3a 81       	ldd	r19, Y+2	; 0x02
     58e:	4b 81       	ldd	r20, Y+3	; 0x03
     590:	5c 81       	ldd	r21, Y+4	; 0x04
     592:	6d 81       	ldd	r22, Y+5	; 0x05
     594:	7e 81       	ldd	r23, Y+6	; 0x06
     596:	83 2d       	mov	r24, r3
     598:	92 2d       	mov	r25, r2
     59a:	0e 94 8b 07 	call	0xf16	; 0xf16 <__udivdi3>
     59e:	80 e3       	ldi	r24, 0x30	; 48
     5a0:	82 0f       	add	r24, r18
     5a2:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Write_CHAR>
				NUM %=Multiplier;
     5a6:	08 89       	ldd	r16, Y+16	; 0x10
     5a8:	1f 85       	ldd	r17, Y+15	; 0x0f
     5aa:	29 81       	ldd	r18, Y+1	; 0x01
     5ac:	3a 81       	ldd	r19, Y+2	; 0x02
     5ae:	4b 81       	ldd	r20, Y+3	; 0x03
     5b0:	5c 81       	ldd	r21, Y+4	; 0x04
     5b2:	6d 81       	ldd	r22, Y+5	; 0x05
     5b4:	7e 81       	ldd	r23, Y+6	; 0x06
     5b6:	83 2d       	mov	r24, r3
     5b8:	92 2d       	mov	r25, r2
     5ba:	0e 94 89 07 	call	0xf12	; 0xf12 <__umoddi3>
     5be:	29 83       	std	Y+1, r18	; 0x01
     5c0:	3a 83       	std	Y+2, r19	; 0x02
     5c2:	4b 83       	std	Y+3, r20	; 0x03
     5c4:	5c 83       	std	Y+4, r21	; 0x04
     5c6:	6d 83       	std	Y+5, r22	; 0x05
     5c8:	7e 83       	std	Y+6, r23	; 0x06
     5ca:	38 2e       	mov	r3, r24
     5cc:	29 2e       	mov	r2, r25
			}
			while(Multiplier != 1 );
     5ce:	24 2d       	mov	r18, r4
     5d0:	35 2d       	mov	r19, r5
     5d2:	46 2d       	mov	r20, r6
     5d4:	57 2d       	mov	r21, r7
     5d6:	68 2d       	mov	r22, r8
     5d8:	79 2d       	mov	r23, r9
     5da:	80 2f       	mov	r24, r16
     5dc:	91 2f       	mov	r25, r17
     5de:	a1 e0       	ldi	r26, 0x01	; 1
     5e0:	0e 94 1a 08 	call	0x1034	; 0x1034 <__cmpdi2_s8>
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
     5e6:	a4 cf       	rjmp	.-184    	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
			
		}
	}
}
     5e8:	60 96       	adiw	r28, 0x10	; 16
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	9f 90       	pop	r9
     60a:	8f 90       	pop	r8
     60c:	7f 90       	pop	r7
     60e:	6f 90       	pop	r6
     610:	5f 90       	pop	r5
     612:	4f 90       	pop	r4
     614:	3f 90       	pop	r3
     616:	2f 90       	pop	r2
     618:	08 95       	ret

0000061a <main>:
#define F_CPU   16000000
#include <util/delay.h>

int main(void)
{
    DIO_init();
     61a:	0e 94 14 04 	call	0x828	; 0x828 <DIO_init>
    LCD_init();
     61e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_init>
    KEY_VoidInit();
     622:	0e 94 41 00 	call	0x82	; 0x82 <KEY_VoidInit>
    
    LCD_GoTo(0,4);
     626:	64 e0       	ldi	r22, 0x04	; 4
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_GoTo>
    LCD_WriteString("WElCOME");
     62e:	88 e7       	ldi	r24, 0x78	; 120
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_WriteString>
    LCD_GoTo(1,3);
     636:	63 e0       	ldi	r22, 0x03	; 3
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_GoTo>
    LCD_WriteString("CALCULATOR");
     63e:	80 e8       	ldi	r24, 0x80	; 128
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_WriteString>
     646:	2f ef       	ldi	r18, 0xFF	; 255
     648:	83 ec       	ldi	r24, 0xC3	; 195
     64a:	99 e0       	ldi	r25, 0x09	; 9
     64c:	21 50       	subi	r18, 0x01	; 1
     64e:	80 40       	sbci	r24, 0x00	; 0
     650:	90 40       	sbci	r25, 0x00	; 0
     652:	e1 f7       	brne	.-8      	; 0x64c <main+0x32>
     654:	00 c0       	rjmp	.+0      	; 0x656 <main+0x3c>
     656:	00 00       	nop
    _delay_ms(200);
    LCD_Clear();
     658:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_Clear>
  
    uint8 PressedKey,Operator='\0';
    f32 Num1=0,Num2=0;
     65c:	81 2c       	mov	r8, r1
     65e:	91 2c       	mov	r9, r1
     660:	54 01       	movw	r10, r8
     662:	00 e0       	ldi	r16, 0x00	; 0
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	d0 e0       	ldi	r29, 0x00	; 0
     668:	71 2c       	mov	r7, r1
    LCD_GoTo(1,3);
    LCD_WriteString("CALCULATOR");
    _delay_ms(200);
    LCD_Clear();
  
    uint8 PressedKey,Operator='\0';
     66a:	e1 2c       	mov	r14, r1
    f32 Num1=0,Num2=0;
    f32 Res;
    while(1)
    {      
	    PressedKey = Key_U8PressedKey();
     66c:	0e 94 92 00 	call	0x124	; 0x124 <Key_U8PressedKey>
     670:	c8 2f       	mov	r28, r24
		
	    if(PressedKey>='0' && PressedKey<='9')
     672:	80 ed       	ldi	r24, 0xD0	; 208
     674:	8c 0f       	add	r24, r28
     676:	8a 30       	cpi	r24, 0x0A	; 10
     678:	08 f0       	brcs	.+2      	; 0x67c <main+0x62>
     67a:	46 c0       	rjmp	.+140    	; 0x708 <main+0xee>
	    {
		    if(Operator=='\0')
     67c:	e1 10       	cpse	r14, r1
     67e:	24 c0       	rjmp	.+72     	; 0x6c8 <main+0xae>
		    {   	   
		            LCD_Write_CHAR(PressedKey);
     680:	8c 2f       	mov	r24, r28
     682:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Write_CHAR>
			    Num1 = Num1*10 + (PressedKey-'0');
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e2       	ldi	r20, 0x20	; 32
     68c:	51 e4       	ldi	r21, 0x41	; 65
     68e:	60 2f       	mov	r22, r16
     690:	71 2f       	mov	r23, r17
     692:	8d 2f       	mov	r24, r29
     694:	97 2d       	mov	r25, r7
     696:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
     69a:	2b 01       	movw	r4, r22
     69c:	3c 01       	movw	r6, r24
     69e:	6c 2f       	mov	r22, r28
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	60 53       	subi	r22, 0x30	; 48
     6a4:	71 09       	sbc	r23, r1
     6a6:	07 2e       	mov	r0, r23
     6a8:	00 0c       	add	r0, r0
     6aa:	88 0b       	sbc	r24, r24
     6ac:	99 0b       	sbc	r25, r25
     6ae:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__floatsisf>
     6b2:	9b 01       	movw	r18, r22
     6b4:	ac 01       	movw	r20, r24
     6b6:	c3 01       	movw	r24, r6
     6b8:	b2 01       	movw	r22, r4
     6ba:	0e 94 3b 05 	call	0xa76	; 0xa76 <__addsf3>
     6be:	06 2f       	mov	r16, r22
     6c0:	17 2f       	mov	r17, r23
     6c2:	d8 2f       	mov	r29, r24
     6c4:	79 2e       	mov	r7, r25
     6c6:	d2 cf       	rjmp	.-92     	; 0x66c <main+0x52>
		    }
		    else
		    {
				LCD_Write_CHAR(PressedKey);
     6c8:	8c 2f       	mov	r24, r28
     6ca:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Write_CHAR>
			    Num2 = (Num2*10) + (PressedKey-'0');
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e2       	ldi	r20, 0x20	; 32
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	c5 01       	movw	r24, r10
     6d8:	b4 01       	movw	r22, r8
     6da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
     6de:	4b 01       	movw	r8, r22
     6e0:	5c 01       	movw	r10, r24
     6e2:	6c 2f       	mov	r22, r28
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	60 53       	subi	r22, 0x30	; 48
     6e8:	71 09       	sbc	r23, r1
     6ea:	07 2e       	mov	r0, r23
     6ec:	00 0c       	add	r0, r0
     6ee:	88 0b       	sbc	r24, r24
     6f0:	99 0b       	sbc	r25, r25
     6f2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__floatsisf>
     6f6:	9b 01       	movw	r18, r22
     6f8:	ac 01       	movw	r20, r24
     6fa:	c5 01       	movw	r24, r10
     6fc:	b4 01       	movw	r22, r8
     6fe:	0e 94 3b 05 	call	0xa76	; 0xa76 <__addsf3>
     702:	4b 01       	movw	r8, r22
     704:	5c 01       	movw	r10, r24
     706:	b2 cf       	rjmp	.-156    	; 0x66c <main+0x52>
		    }
	    }
	    else if(PressedKey=='+' || PressedKey=='-' || PressedKey=='*' ||PressedKey=='/' )
     708:	cb 32       	cpi	r28, 0x2B	; 43
     70a:	31 f0       	breq	.+12     	; 0x718 <main+0xfe>
     70c:	cd 32       	cpi	r28, 0x2D	; 45
     70e:	21 f0       	breq	.+8      	; 0x718 <main+0xfe>
     710:	ca 32       	cpi	r28, 0x2A	; 42
     712:	11 f0       	breq	.+4      	; 0x718 <main+0xfe>
     714:	cf 32       	cpi	r28, 0x2F	; 47
     716:	29 f4       	brne	.+10     	; 0x722 <main+0x108>
	    {   
		    LCD_Write_CHAR(PressedKey);
     718:	8c 2f       	mov	r24, r28
     71a:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Write_CHAR>
		    Operator = PressedKey;
     71e:	ec 2e       	mov	r14, r28
     720:	a5 cf       	rjmp	.-182    	; 0x66c <main+0x52>
	    }
	    else if(PressedKey=='=')
     722:	cd 33       	cpi	r28, 0x3D	; 61
     724:	09 f0       	breq	.+2      	; 0x728 <main+0x10e>
     726:	72 c0       	rjmp	.+228    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	    {    
		    LCD_Write_CHAR(PressedKey);
     728:	8c 2f       	mov	r24, r28
     72a:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_Write_CHAR>
		    switch(Operator)
     72e:	2b e2       	ldi	r18, 0x2B	; 43
     730:	e2 16       	cp	r14, r18
     732:	69 f0       	breq	.+26     	; 0x74e <main+0x134>
     734:	2e 15       	cp	r18, r14
     736:	20 f0       	brcs	.+8      	; 0x740 <main+0x126>
     738:	8a e2       	ldi	r24, 0x2A	; 42
     73a:	e8 16       	cp	r14, r24
     73c:	11 f1       	breq	.+68     	; 0x782 <main+0x168>
     73e:	4b c0       	rjmp	.+150    	; 0x7d6 <main+0x1bc>
     740:	9d e2       	ldi	r25, 0x2D	; 45
     742:	e9 16       	cp	r14, r25
     744:	89 f0       	breq	.+34     	; 0x768 <main+0x14e>
     746:	2f e2       	ldi	r18, 0x2F	; 47
     748:	e2 16       	cp	r14, r18
     74a:	41 f1       	breq	.+80     	; 0x79c <main+0x182>
     74c:	44 c0       	rjmp	.+136    	; 0x7d6 <main+0x1bc>
		    {
			    case '+':
			    Res = Num1 + Num2;
     74e:	a5 01       	movw	r20, r10
     750:	94 01       	movw	r18, r8
     752:	60 2f       	mov	r22, r16
     754:	71 2f       	mov	r23, r17
     756:	8d 2f       	mov	r24, r29
     758:	97 2d       	mov	r25, r7
     75a:	0e 94 3b 05 	call	0xa76	; 0xa76 <__addsf3>
     75e:	06 2f       	mov	r16, r22
     760:	17 2f       	mov	r17, r23
     762:	d8 2f       	mov	r29, r24
     764:	79 2e       	mov	r7, r25
			    break;
     766:	41 c0       	rjmp	.+130    	; 0x7ea <main+0x1d0>
			    case '-':
			    Res = Num1 - Num2;
     768:	a5 01       	movw	r20, r10
     76a:	94 01       	movw	r18, r8
     76c:	60 2f       	mov	r22, r16
     76e:	71 2f       	mov	r23, r17
     770:	8d 2f       	mov	r24, r29
     772:	97 2d       	mov	r25, r7
     774:	0e 94 3a 05 	call	0xa74	; 0xa74 <__subsf3>
     778:	06 2f       	mov	r16, r22
     77a:	17 2f       	mov	r17, r23
     77c:	d8 2f       	mov	r29, r24
     77e:	79 2e       	mov	r7, r25
			    break;
     780:	34 c0       	rjmp	.+104    	; 0x7ea <main+0x1d0>
			    case '*':
			    Res = Num1 * Num2;
     782:	a5 01       	movw	r20, r10
     784:	94 01       	movw	r18, r8
     786:	60 2f       	mov	r22, r16
     788:	71 2f       	mov	r23, r17
     78a:	8d 2f       	mov	r24, r29
     78c:	97 2d       	mov	r25, r7
     78e:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
     792:	06 2f       	mov	r16, r22
     794:	17 2f       	mov	r17, r23
     796:	d8 2f       	mov	r29, r24
     798:	79 2e       	mov	r7, r25
			    break;
     79a:	27 c0       	rjmp	.+78     	; 0x7ea <main+0x1d0>
			    case '/':
			    if(Num2!=0)
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	a9 01       	movw	r20, r18
     7a2:	c5 01       	movw	r24, r10
     7a4:	b4 01       	movw	r22, r8
     7a6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__cmpsf2>
     7aa:	88 23       	and	r24, r24
     7ac:	69 f0       	breq	.+26     	; 0x7c8 <main+0x1ae>
			    {
				    Res=Num1/Num2;
     7ae:	a5 01       	movw	r20, r10
     7b0:	94 01       	movw	r18, r8
     7b2:	60 2f       	mov	r22, r16
     7b4:	71 2f       	mov	r23, r17
     7b6:	8d 2f       	mov	r24, r29
     7b8:	97 2d       	mov	r25, r7
     7ba:	0e 94 ac 05 	call	0xb58	; 0xb58 <__divsf3>
     7be:	06 2f       	mov	r16, r22
     7c0:	17 2f       	mov	r17, r23
     7c2:	d8 2f       	mov	r29, r24
     7c4:	79 2e       	mov	r7, r25
			    {
				    LCD_Clear();
				    LCD_WriteString("Division By Zero");
				    continue;
			    }
			    break;
     7c6:	11 c0       	rjmp	.+34     	; 0x7ea <main+0x1d0>
			    {
				    Res=Num1/Num2;
			    }
			    else
			    {
				    LCD_Clear();
     7c8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_Clear>
				    LCD_WriteString("Division By Zero");
     7cc:	8b e8       	ldi	r24, 0x8B	; 139
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_WriteString>
				    continue;
     7d4:	4b cf       	rjmp	.-362    	; 0x66c <main+0x52>
			    }
			    break;
			    default :
			    LCD_Clear();
     7d6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_Clear>
			    LCD_WriteString("Invalid Operator !");
     7da:	8c e9       	ldi	r24, 0x9C	; 156
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_WriteString>
     7e2:	0d 2d       	mov	r16, r13
     7e4:	1c 2d       	mov	r17, r12
     7e6:	df 2d       	mov	r29, r15
     7e8:	73 2c       	mov	r7, r3
		    }
			
		    LCD_WriteNUM(Res);
     7ea:	60 2f       	mov	r22, r16
     7ec:	71 2f       	mov	r23, r17
     7ee:	8d 2f       	mov	r24, r29
     7f0:	97 2d       	mov	r25, r7
     7f2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fixsfdi>
     7f6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteNUM>
     7fa:	d0 2e       	mov	r13, r16
     7fc:	c1 2e       	mov	r12, r17
     7fe:	fd 2e       	mov	r15, r29
     800:	37 2c       	mov	r3, r7
		    Num1 = Res;
			 Num2 = 0;
     802:	81 2c       	mov	r8, r1
     804:	91 2c       	mov	r9, r1
     806:	54 01       	movw	r10, r8
		    Operator = '\0';
     808:	e1 2c       	mov	r14, r1
     80a:	30 cf       	rjmp	.-416    	; 0x66c <main+0x52>

	    }
	    else if(PressedKey=='C')
     80c:	c3 34       	cpi	r28, 0x43	; 67
     80e:	09 f0       	breq	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     810:	2d cf       	rjmp	.-422    	; 0x66c <main+0x52>
	    {
		    LCD_Clear();
     812:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_Clear>
		    Num1 = 0;
			Num2 =0;
     816:	81 2c       	mov	r8, r1
     818:	91 2c       	mov	r9, r1
     81a:	54 01       	movw	r10, r8

	    }
	    else if(PressedKey=='C')
	    {
		    LCD_Clear();
		    Num1 = 0;
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	d0 e0       	ldi	r29, 0x00	; 0
     822:	71 2c       	mov	r7, r1
			Num2 =0;
		    Operator='\0';
     824:	e1 2c       	mov	r14, r1
     826:	22 cf       	rjmp	.-444    	; 0x66c <main+0x52>

00000828 <DIO_init>:
#include "DIO_Private.h"

void DIO_init(void)
{
	/*Set Initial Directions FOR Pins */
	DDRA = CONC(DIO_PA7_INITIAL_DIRECTION,DIO_PA6_INITIAL_DIRECTION,DIO_PA5_INITIAL_DIRECTION,DIO_PA4_INITIAL_DIRECTION,
     828:	8d ef       	ldi	r24, 0xFD	; 253
     82a:	8a bb       	out	0x1a, r24	; 26
	DIO_PA3_INITIAL_DIRECTION,DIO_PA2_INITIAL_DIRECTION,DIO_PA1_INITIAL_DIRECTION,DIO_PA0_INITIAL_DIRECTION);
	
	DDRB = CONC(DIO_PB7_INITIAL_DIRECTION,DIO_PB6_INITIAL_DIRECTION,DIO_PB5_INITIAL_DIRECTION,DIO_PB4_INITIAL_DIRECTION,
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	87 bb       	out	0x17, r24	; 23
	DIO_PB3_INITIAL_DIRECTION,DIO_PB2_INITIAL_DIRECTION,DIO_PB1_INITIAL_DIRECTION,DIO_PB0_INITIAL_DIRECTION);
	
	DDRC = CONC(DIO_PC7_INITIAL_DIRECTION,DIO_PC6_INITIAL_DIRECTION,DIO_PC5_INITIAL_DIRECTION,DIO_PC4_INITIAL_DIRECTION,
     830:	8d e3       	ldi	r24, 0x3D	; 61
     832:	84 bb       	out	0x14, r24	; 20
	DIO_PC3_INITIAL_DIRECTION,DIO_PC2_INITIAL_DIRECTION,DIO_PC1_INITIAL_DIRECTION,DIO_PC0_INITIAL_DIRECTION);
	
	DDRD = CONC(DIO_PD7_INITIAL_DIRECTION,DIO_PD6_INITIAL_DIRECTION,DIO_PD5_INITIAL_DIRECTION,DIO_PD4_INITIAL_DIRECTION,
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	81 bb       	out	0x11, r24	; 17
	DIO_PD3_INITIAL_DIRECTION,DIO_PD2_INITIAL_DIRECTION,DIO_PD1_INITIAL_DIRECTION,DIO_PD0_INITIAL_DIRECTION);
	
	/*Set Initial Values FOR Pins */
	PORTA = CONC(DIO_PA7_INITIAL_VALUE,DIO_PA6_INITIAL_VALUE,DIO_PA5_INITIAL_VALUE,DIO_PA4_INITIAL_VALUE,
     838:	1b ba       	out	0x1b, r1	; 27
	DIO_PA3_INITIAL_VALUE,DIO_PA2_INITIAL_VALUE,DIO_PA1_INITIAL_VALUE,DIO_PA0_INITIAL_VALUE);
	
	PORTB = CONC(DIO_PB7_INITIAL_VALUE,DIO_PB6_INITIAL_VALUE,DIO_PB5_INITIAL_VALUE,DIO_PB4_INITIAL_VALUE,
     83a:	18 ba       	out	0x18, r1	; 24
	DIO_PB3_INITIAL_VALUE,DIO_PB2_INITIAL_VALUE,DIO_PB1_INITIAL_VALUE,DIO_PB0_INITIAL_VALUE);
	
	PORTC = CONC(DIO_PC7_INITIAL_VALUE,DIO_PC6_INITIAL_VALUE,DIO_PC5_INITIAL_VALUE,DIO_PC4_INITIAL_VALUE,
     83c:	8c e3       	ldi	r24, 0x3C	; 60
     83e:	85 bb       	out	0x15, r24	; 21
	DIO_PC3_INITIAL_VALUE,DIO_PC2_INITIAL_VALUE,DIO_PC1_INITIAL_VALUE,DIO_PC0_INITIAL_VALUE);
	
	PORTD = CONC(DIO_PD7_INITIAL_VALUE,DIO_PD6_INITIAL_VALUE,DIO_PD5_INITIAL_VALUE,DIO_PD4_INITIAL_VALUE,
     840:	88 ee       	ldi	r24, 0xE8	; 232
     842:	82 bb       	out	0x12, r24	; 18
     844:	08 95       	ret

00000846 <DIO_setPinDirection>:
	DIO_PD3_INITIAL_VALUE,DIO_PD2_INITIAL_VALUE,DIO_PD1_INITIAL_VALUE,DIO_PD0_INITIAL_VALUE);
}

void DIO_setPinDirection(uint8 PortId, uint8 PinId, uint8 PinDirection)
{
	if((PortId<=3)&&(PinId<=7)&&((DIO_PIN_OUTPUT==PinDirection)||(DIO_PIN_INPUT==PinDirection)))
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	08 f0       	brcs	.+2      	; 0x84c <DIO_setPinDirection+0x6>
     84a:	72 c0       	rjmp	.+228    	; 0x930 <__stack+0xd1>
     84c:	68 30       	cpi	r22, 0x08	; 8
     84e:	08 f0       	brcs	.+2      	; 0x852 <DIO_setPinDirection+0xc>
     850:	6f c0       	rjmp	.+222    	; 0x930 <__stack+0xd1>
     852:	42 30       	cpi	r20, 0x02	; 2
     854:	08 f0       	brcs	.+2      	; 0x858 <DIO_setPinDirection+0x12>
     856:	6c c0       	rjmp	.+216    	; 0x930 <__stack+0xd1>
	{
		switch(PortId)
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	01 f1       	breq	.+64     	; 0x89c <__stack+0x3d>
     85c:	30 f0       	brcs	.+12     	; 0x86a <__stack+0xb>
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	b1 f1       	breq	.+108    	; 0x8ce <__stack+0x6f>
     862:	83 30       	cpi	r24, 0x03	; 3
     864:	09 f4       	brne	.+2      	; 0x868 <__stack+0x9>
     866:	4c c0       	rjmp	.+152    	; 0x900 <__stack+0xa1>
     868:	08 95       	ret
		{
			case DIO_PORTA:
			if(DIO_PIN_OUTPUT == PinDirection)
     86a:	41 30       	cpi	r20, 0x01	; 1
     86c:	59 f4       	brne	.+22     	; 0x884 <__stack+0x25>
			{
				SET_BIT(DDRA,PinId);
     86e:	2a b3       	in	r18, 0x1a	; 26
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
     876:	88 0f       	add	r24, r24
     878:	99 1f       	adc	r25, r25
     87a:	6a 95       	dec	r22
     87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
     87e:	82 2b       	or	r24, r18
     880:	8a bb       	out	0x1a, r24	; 26
     882:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,PinId);
     884:	2a b3       	in	r18, 0x1a	; 26
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	6a 95       	dec	r22
     892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
     894:	80 95       	com	r24
     896:	82 23       	and	r24, r18
     898:	8a bb       	out	0x1a, r24	; 26
     89a:	08 95       	ret
			}
			break;

			case DIO_PORTB:
			if(DIO_PIN_OUTPUT == PinDirection)
     89c:	41 30       	cpi	r20, 0x01	; 1
     89e:	59 f4       	brne	.+22     	; 0x8b6 <__stack+0x57>
			{
				SET_BIT(DDRB,PinId);
     8a0:	27 b3       	in	r18, 0x17	; 23
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__stack+0x4d>
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	6a 95       	dec	r22
     8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <__stack+0x49>
     8b0:	82 2b       	or	r24, r18
     8b2:	87 bb       	out	0x17, r24	; 23
     8b4:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,PinId);
     8b6:	27 b3       	in	r18, 0x17	; 23
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	6a 95       	dec	r22
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
     8c6:	80 95       	com	r24
     8c8:	82 23       	and	r24, r18
     8ca:	87 bb       	out	0x17, r24	; 23
     8cc:	08 95       	ret
			}
			break;

			case DIO_PORTC:
			if(DIO_PIN_OUTPUT == PinDirection)
     8ce:	41 30       	cpi	r20, 0x01	; 1
     8d0:	59 f4       	brne	.+22     	; 0x8e8 <__stack+0x89>
			{
				SET_BIT(DDRC,PinId);
     8d2:	24 b3       	in	r18, 0x14	; 20
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	6a 95       	dec	r22
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
     8e2:	82 2b       	or	r24, r18
     8e4:	84 bb       	out	0x14, r24	; 20
     8e6:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,PinId);
     8e8:	24 b3       	in	r18, 0x14	; 20
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__stack+0x95>
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	6a 95       	dec	r22
     8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <__stack+0x91>
     8f8:	80 95       	com	r24
     8fa:	82 23       	and	r24, r18
     8fc:	84 bb       	out	0x14, r24	; 20
     8fe:	08 95       	ret
			}
			break;

			case DIO_PORTD:
			if(DIO_PIN_OUTPUT == PinDirection)
     900:	41 30       	cpi	r20, 0x01	; 1
     902:	59 f4       	brne	.+22     	; 0x91a <__stack+0xbb>
			{
				SET_BIT(DDRD,PinId);
     904:	21 b3       	in	r18, 0x11	; 17
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0xb1>
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	6a 95       	dec	r22
     912:	e2 f7       	brpl	.-8      	; 0x90c <__stack+0xad>
     914:	82 2b       	or	r24, r18
     916:	81 bb       	out	0x11, r24	; 17
     918:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,PinId);
     91a:	21 b3       	in	r18, 0x11	; 17
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	6a 95       	dec	r22
     928:	e2 f7       	brpl	.-8      	; 0x922 <__stack+0xc3>
     92a:	80 95       	com	r24
     92c:	82 23       	and	r24, r18
     92e:	81 bb       	out	0x11, r24	; 17
     930:	08 95       	ret

00000932 <DIO_setPinValue>:
}


void DIO_setPinValue(uint8 PortId, uint8 PinId, uint8 PinValue)
{
	switch(PortId)
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	01 f1       	breq	.+64     	; 0x976 <DIO_setPinValue+0x44>
     936:	30 f0       	brcs	.+12     	; 0x944 <DIO_setPinValue+0x12>
     938:	82 30       	cpi	r24, 0x02	; 2
     93a:	b1 f1       	breq	.+108    	; 0x9a8 <DIO_setPinValue+0x76>
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	09 f4       	brne	.+2      	; 0x942 <DIO_setPinValue+0x10>
     940:	4c c0       	rjmp	.+152    	; 0x9da <DIO_setPinValue+0xa8>
     942:	08 95       	ret
	{
		case DIO_PORTA:
		if(DIO_PIN_HIGH == PinValue)
     944:	41 30       	cpi	r20, 0x01	; 1
     946:	59 f4       	brne	.+22     	; 0x95e <DIO_setPinValue+0x2c>
		{
			SET_BIT(PORTA,PinId);
     948:	2b b3       	in	r18, 0x1b	; 27
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <DIO_setPinValue+0x22>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	6a 95       	dec	r22
     956:	e2 f7       	brpl	.-8      	; 0x950 <DIO_setPinValue+0x1e>
     958:	82 2b       	or	r24, r18
     95a:	8b bb       	out	0x1b, r24	; 27
     95c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,PinId);
     95e:	2b b3       	in	r18, 0x1b	; 27
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	02 c0       	rjmp	.+4      	; 0x96a <DIO_setPinValue+0x38>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	6a 95       	dec	r22
     96c:	e2 f7       	brpl	.-8      	; 0x966 <DIO_setPinValue+0x34>
     96e:	80 95       	com	r24
     970:	82 23       	and	r24, r18
     972:	8b bb       	out	0x1b, r24	; 27
     974:	08 95       	ret
		}
		break;

		case DIO_PORTB:
		if(DIO_PIN_HIGH == PinValue)
     976:	41 30       	cpi	r20, 0x01	; 1
     978:	59 f4       	brne	.+22     	; 0x990 <DIO_setPinValue+0x5e>
		{
			SET_BIT(PORTB,PinId);
     97a:	28 b3       	in	r18, 0x18	; 24
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_setPinValue+0x54>
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	6a 95       	dec	r22
     988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_setPinValue+0x50>
     98a:	82 2b       	or	r24, r18
     98c:	88 bb       	out	0x18, r24	; 24
     98e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,PinId);
     990:	28 b3       	in	r18, 0x18	; 24
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	02 c0       	rjmp	.+4      	; 0x99c <DIO_setPinValue+0x6a>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	6a 95       	dec	r22
     99e:	e2 f7       	brpl	.-8      	; 0x998 <DIO_setPinValue+0x66>
     9a0:	80 95       	com	r24
     9a2:	82 23       	and	r24, r18
     9a4:	88 bb       	out	0x18, r24	; 24
     9a6:	08 95       	ret
		}
		break;

		case DIO_PORTC:
		if(DIO_PIN_HIGH == PinValue)
     9a8:	41 30       	cpi	r20, 0x01	; 1
     9aa:	59 f4       	brne	.+22     	; 0x9c2 <DIO_setPinValue+0x90>
		{
			SET_BIT(PORTC,PinId);
     9ac:	25 b3       	in	r18, 0x15	; 21
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_setPinValue+0x86>
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	6a 95       	dec	r22
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_setPinValue+0x82>
     9bc:	82 2b       	or	r24, r18
     9be:	85 bb       	out	0x15, r24	; 21
     9c0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,PinId);
     9c2:	25 b3       	in	r18, 0x15	; 21
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <DIO_setPinValue+0x9c>
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	6a 95       	dec	r22
     9d0:	e2 f7       	brpl	.-8      	; 0x9ca <DIO_setPinValue+0x98>
     9d2:	80 95       	com	r24
     9d4:	82 23       	and	r24, r18
     9d6:	85 bb       	out	0x15, r24	; 21
     9d8:	08 95       	ret
		}
		break;

		case DIO_PORTD:
		if(DIO_PIN_HIGH == PinValue)
     9da:	41 30       	cpi	r20, 0x01	; 1
     9dc:	59 f4       	brne	.+22     	; 0x9f4 <DIO_setPinValue+0xc2>
		{
			SET_BIT(PORTD,PinId);
     9de:	22 b3       	in	r18, 0x12	; 18
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_setPinValue+0xb8>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	6a 95       	dec	r22
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_setPinValue+0xb4>
     9ee:	82 2b       	or	r24, r18
     9f0:	82 bb       	out	0x12, r24	; 18
     9f2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,PinId);
     9f4:	22 b3       	in	r18, 0x12	; 18
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <DIO_setPinValue+0xce>
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	6a 95       	dec	r22
     a02:	e2 f7       	brpl	.-8      	; 0x9fc <DIO_setPinValue+0xca>
     a04:	80 95       	com	r24
     a06:	82 23       	and	r24, r18
     a08:	82 bb       	out	0x12, r24	; 18
     a0a:	08 95       	ret

00000a0c <DIO_getPinValue>:
}


void DIO_getPinValue(uint8 PortId, uint8 PinId, uint8* PinValue)
{
	switch(PortId)
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	89 f0       	breq	.+34     	; 0xa32 <DIO_getPinValue+0x26>
     a10:	28 f0       	brcs	.+10     	; 0xa1c <DIO_getPinValue+0x10>
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	c9 f0       	breq	.+50     	; 0xa48 <DIO_getPinValue+0x3c>
     a16:	83 30       	cpi	r24, 0x03	; 3
     a18:	11 f1       	breq	.+68     	; 0xa5e <DIO_getPinValue+0x52>
     a1a:	08 95       	ret
	{
		case DIO_PORTA:
		*PinValue = GET_BIT(PINA,PinId);
     a1c:	89 b3       	in	r24, 0x19	; 25
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <DIO_getPinValue+0x1a>
     a22:	95 95       	asr	r25
     a24:	87 95       	ror	r24
     a26:	6a 95       	dec	r22
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <DIO_getPinValue+0x16>
     a2a:	81 70       	andi	r24, 0x01	; 1
     a2c:	fa 01       	movw	r30, r20
     a2e:	80 83       	st	Z, r24
		break;
     a30:	08 95       	ret

		case DIO_PORTB:
		*PinValue = GET_BIT(PINB,PinId);
     a32:	86 b3       	in	r24, 0x16	; 22
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <DIO_getPinValue+0x30>
     a38:	95 95       	asr	r25
     a3a:	87 95       	ror	r24
     a3c:	6a 95       	dec	r22
     a3e:	e2 f7       	brpl	.-8      	; 0xa38 <DIO_getPinValue+0x2c>
     a40:	81 70       	andi	r24, 0x01	; 1
     a42:	fa 01       	movw	r30, r20
     a44:	80 83       	st	Z, r24
		break;
     a46:	08 95       	ret

		case DIO_PORTC:
		*PinValue = GET_BIT(PINC,PinId);
     a48:	83 b3       	in	r24, 0x13	; 19
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_getPinValue+0x46>
     a4e:	95 95       	asr	r25
     a50:	87 95       	ror	r24
     a52:	6a 95       	dec	r22
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <DIO_getPinValue+0x42>
     a56:	81 70       	andi	r24, 0x01	; 1
     a58:	fa 01       	movw	r30, r20
     a5a:	80 83       	st	Z, r24
		break;
     a5c:	08 95       	ret

		case DIO_PORTD:
		*PinValue = GET_BIT(PIND,PinId);
     a5e:	80 b3       	in	r24, 0x10	; 16
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_getPinValue+0x5c>
     a64:	95 95       	asr	r25
     a66:	87 95       	ror	r24
     a68:	6a 95       	dec	r22
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <DIO_getPinValue+0x58>
     a6c:	81 70       	andi	r24, 0x01	; 1
     a6e:	fa 01       	movw	r30, r20
     a70:	80 83       	st	Z, r24
     a72:	08 95       	ret

00000a74 <__subsf3>:
     a74:	50 58       	subi	r21, 0x80	; 128

00000a76 <__addsf3>:
     a76:	bb 27       	eor	r27, r27
     a78:	aa 27       	eor	r26, r26
     a7a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__addsf3x>
     a7e:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_round>
     a82:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_pscA>
     a86:	38 f0       	brcs	.+14     	; 0xa96 <__addsf3+0x20>
     a88:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_pscB>
     a8c:	20 f0       	brcs	.+8      	; 0xa96 <__addsf3+0x20>
     a8e:	39 f4       	brne	.+14     	; 0xa9e <__addsf3+0x28>
     a90:	9f 3f       	cpi	r25, 0xFF	; 255
     a92:	19 f4       	brne	.+6      	; 0xa9a <__addsf3+0x24>
     a94:	26 f4       	brtc	.+8      	; 0xa9e <__addsf3+0x28>
     a96:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__fp_nan>
     a9a:	0e f4       	brtc	.+2      	; 0xa9e <__addsf3+0x28>
     a9c:	e0 95       	com	r30
     a9e:	e7 fb       	bst	r30, 7
     aa0:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_inf>

00000aa4 <__addsf3x>:
     aa4:	e9 2f       	mov	r30, r25
     aa6:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_split3>
     aaa:	58 f3       	brcs	.-42     	; 0xa82 <__addsf3+0xc>
     aac:	ba 17       	cp	r27, r26
     aae:	62 07       	cpc	r22, r18
     ab0:	73 07       	cpc	r23, r19
     ab2:	84 07       	cpc	r24, r20
     ab4:	95 07       	cpc	r25, r21
     ab6:	20 f0       	brcs	.+8      	; 0xac0 <__addsf3x+0x1c>
     ab8:	79 f4       	brne	.+30     	; 0xad8 <__addsf3x+0x34>
     aba:	a6 f5       	brtc	.+104    	; 0xb24 <__addsf3x+0x80>
     abc:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_zero>
     ac0:	0e f4       	brtc	.+2      	; 0xac4 <__addsf3x+0x20>
     ac2:	e0 95       	com	r30
     ac4:	0b 2e       	mov	r0, r27
     ac6:	ba 2f       	mov	r27, r26
     ac8:	a0 2d       	mov	r26, r0
     aca:	0b 01       	movw	r0, r22
     acc:	b9 01       	movw	r22, r18
     ace:	90 01       	movw	r18, r0
     ad0:	0c 01       	movw	r0, r24
     ad2:	ca 01       	movw	r24, r20
     ad4:	a0 01       	movw	r20, r0
     ad6:	11 24       	eor	r1, r1
     ad8:	ff 27       	eor	r31, r31
     ada:	59 1b       	sub	r21, r25
     adc:	99 f0       	breq	.+38     	; 0xb04 <__addsf3x+0x60>
     ade:	59 3f       	cpi	r21, 0xF9	; 249
     ae0:	50 f4       	brcc	.+20     	; 0xaf6 <__addsf3x+0x52>
     ae2:	50 3e       	cpi	r21, 0xE0	; 224
     ae4:	68 f1       	brcs	.+90     	; 0xb40 <__addsf3x+0x9c>
     ae6:	1a 16       	cp	r1, r26
     ae8:	f0 40       	sbci	r31, 0x00	; 0
     aea:	a2 2f       	mov	r26, r18
     aec:	23 2f       	mov	r18, r19
     aee:	34 2f       	mov	r19, r20
     af0:	44 27       	eor	r20, r20
     af2:	58 5f       	subi	r21, 0xF8	; 248
     af4:	f3 cf       	rjmp	.-26     	; 0xadc <__addsf3x+0x38>
     af6:	46 95       	lsr	r20
     af8:	37 95       	ror	r19
     afa:	27 95       	ror	r18
     afc:	a7 95       	ror	r26
     afe:	f0 40       	sbci	r31, 0x00	; 0
     b00:	53 95       	inc	r21
     b02:	c9 f7       	brne	.-14     	; 0xaf6 <__addsf3x+0x52>
     b04:	7e f4       	brtc	.+30     	; 0xb24 <__addsf3x+0x80>
     b06:	1f 16       	cp	r1, r31
     b08:	ba 0b       	sbc	r27, r26
     b0a:	62 0b       	sbc	r22, r18
     b0c:	73 0b       	sbc	r23, r19
     b0e:	84 0b       	sbc	r24, r20
     b10:	ba f0       	brmi	.+46     	; 0xb40 <__addsf3x+0x9c>
     b12:	91 50       	subi	r25, 0x01	; 1
     b14:	a1 f0       	breq	.+40     	; 0xb3e <__addsf3x+0x9a>
     b16:	ff 0f       	add	r31, r31
     b18:	bb 1f       	adc	r27, r27
     b1a:	66 1f       	adc	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	88 1f       	adc	r24, r24
     b20:	c2 f7       	brpl	.-16     	; 0xb12 <__addsf3x+0x6e>
     b22:	0e c0       	rjmp	.+28     	; 0xb40 <__addsf3x+0x9c>
     b24:	ba 0f       	add	r27, r26
     b26:	62 1f       	adc	r22, r18
     b28:	73 1f       	adc	r23, r19
     b2a:	84 1f       	adc	r24, r20
     b2c:	48 f4       	brcc	.+18     	; 0xb40 <__addsf3x+0x9c>
     b2e:	87 95       	ror	r24
     b30:	77 95       	ror	r23
     b32:	67 95       	ror	r22
     b34:	b7 95       	ror	r27
     b36:	f7 95       	ror	r31
     b38:	9e 3f       	cpi	r25, 0xFE	; 254
     b3a:	08 f0       	brcs	.+2      	; 0xb3e <__addsf3x+0x9a>
     b3c:	b0 cf       	rjmp	.-160    	; 0xa9e <__addsf3+0x28>
     b3e:	93 95       	inc	r25
     b40:	88 0f       	add	r24, r24
     b42:	08 f0       	brcs	.+2      	; 0xb46 <__addsf3x+0xa2>
     b44:	99 27       	eor	r25, r25
     b46:	ee 0f       	add	r30, r30
     b48:	97 95       	ror	r25
     b4a:	87 95       	ror	r24
     b4c:	08 95       	ret

00000b4e <__cmpsf2>:
     b4e:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_cmp>
     b52:	08 f4       	brcc	.+2      	; 0xb56 <__cmpsf2+0x8>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	08 95       	ret

00000b58 <__divsf3>:
     b58:	0e 94 c0 05 	call	0xb80	; 0xb80 <__divsf3x>
     b5c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_round>
     b60:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_pscB>
     b64:	58 f0       	brcs	.+22     	; 0xb7c <__divsf3+0x24>
     b66:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_pscA>
     b6a:	40 f0       	brcs	.+16     	; 0xb7c <__divsf3+0x24>
     b6c:	29 f4       	brne	.+10     	; 0xb78 <__divsf3+0x20>
     b6e:	5f 3f       	cpi	r21, 0xFF	; 255
     b70:	29 f0       	breq	.+10     	; 0xb7c <__divsf3+0x24>
     b72:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_inf>
     b76:	51 11       	cpse	r21, r1
     b78:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_szero>
     b7c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__fp_nan>

00000b80 <__divsf3x>:
     b80:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_split3>
     b84:	68 f3       	brcs	.-38     	; 0xb60 <__divsf3+0x8>

00000b86 <__divsf3_pse>:
     b86:	99 23       	and	r25, r25
     b88:	b1 f3       	breq	.-20     	; 0xb76 <__divsf3+0x1e>
     b8a:	55 23       	and	r21, r21
     b8c:	91 f3       	breq	.-28     	; 0xb72 <__divsf3+0x1a>
     b8e:	95 1b       	sub	r25, r21
     b90:	55 0b       	sbc	r21, r21
     b92:	bb 27       	eor	r27, r27
     b94:	aa 27       	eor	r26, r26
     b96:	62 17       	cp	r22, r18
     b98:	73 07       	cpc	r23, r19
     b9a:	84 07       	cpc	r24, r20
     b9c:	38 f0       	brcs	.+14     	; 0xbac <__divsf3_pse+0x26>
     b9e:	9f 5f       	subi	r25, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	22 0f       	add	r18, r18
     ba4:	33 1f       	adc	r19, r19
     ba6:	44 1f       	adc	r20, r20
     ba8:	aa 1f       	adc	r26, r26
     baa:	a9 f3       	breq	.-22     	; 0xb96 <__divsf3_pse+0x10>
     bac:	35 d0       	rcall	.+106    	; 0xc18 <__divsf3_pse+0x92>
     bae:	0e 2e       	mov	r0, r30
     bb0:	3a f0       	brmi	.+14     	; 0xbc0 <__divsf3_pse+0x3a>
     bb2:	e0 e8       	ldi	r30, 0x80	; 128
     bb4:	32 d0       	rcall	.+100    	; 0xc1a <__divsf3_pse+0x94>
     bb6:	91 50       	subi	r25, 0x01	; 1
     bb8:	50 40       	sbci	r21, 0x00	; 0
     bba:	e6 95       	lsr	r30
     bbc:	00 1c       	adc	r0, r0
     bbe:	ca f7       	brpl	.-14     	; 0xbb2 <__divsf3_pse+0x2c>
     bc0:	2b d0       	rcall	.+86     	; 0xc18 <__divsf3_pse+0x92>
     bc2:	fe 2f       	mov	r31, r30
     bc4:	29 d0       	rcall	.+82     	; 0xc18 <__divsf3_pse+0x92>
     bc6:	66 0f       	add	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	88 1f       	adc	r24, r24
     bcc:	bb 1f       	adc	r27, r27
     bce:	26 17       	cp	r18, r22
     bd0:	37 07       	cpc	r19, r23
     bd2:	48 07       	cpc	r20, r24
     bd4:	ab 07       	cpc	r26, r27
     bd6:	b0 e8       	ldi	r27, 0x80	; 128
     bd8:	09 f0       	breq	.+2      	; 0xbdc <__divsf3_pse+0x56>
     bda:	bb 0b       	sbc	r27, r27
     bdc:	80 2d       	mov	r24, r0
     bde:	bf 01       	movw	r22, r30
     be0:	ff 27       	eor	r31, r31
     be2:	93 58       	subi	r25, 0x83	; 131
     be4:	5f 4f       	sbci	r21, 0xFF	; 255
     be6:	3a f0       	brmi	.+14     	; 0xbf6 <__divsf3_pse+0x70>
     be8:	9e 3f       	cpi	r25, 0xFE	; 254
     bea:	51 05       	cpc	r21, r1
     bec:	78 f0       	brcs	.+30     	; 0xc0c <__divsf3_pse+0x86>
     bee:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_inf>
     bf2:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_szero>
     bf6:	5f 3f       	cpi	r21, 0xFF	; 255
     bf8:	e4 f3       	brlt	.-8      	; 0xbf2 <__divsf3_pse+0x6c>
     bfa:	98 3e       	cpi	r25, 0xE8	; 232
     bfc:	d4 f3       	brlt	.-12     	; 0xbf2 <__divsf3_pse+0x6c>
     bfe:	86 95       	lsr	r24
     c00:	77 95       	ror	r23
     c02:	67 95       	ror	r22
     c04:	b7 95       	ror	r27
     c06:	f7 95       	ror	r31
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	c9 f7       	brne	.-14     	; 0xbfe <__divsf3_pse+0x78>
     c0c:	88 0f       	add	r24, r24
     c0e:	91 1d       	adc	r25, r1
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	97 f9       	bld	r25, 7
     c16:	08 95       	ret
     c18:	e1 e0       	ldi	r30, 0x01	; 1
     c1a:	66 0f       	add	r22, r22
     c1c:	77 1f       	adc	r23, r23
     c1e:	88 1f       	adc	r24, r24
     c20:	bb 1f       	adc	r27, r27
     c22:	62 17       	cp	r22, r18
     c24:	73 07       	cpc	r23, r19
     c26:	84 07       	cpc	r24, r20
     c28:	ba 07       	cpc	r27, r26
     c2a:	20 f0       	brcs	.+8      	; 0xc34 <__divsf3_pse+0xae>
     c2c:	62 1b       	sub	r22, r18
     c2e:	73 0b       	sbc	r23, r19
     c30:	84 0b       	sbc	r24, r20
     c32:	ba 0b       	sbc	r27, r26
     c34:	ee 1f       	adc	r30, r30
     c36:	88 f7       	brcc	.-30     	; 0xc1a <__divsf3_pse+0x94>
     c38:	e0 95       	com	r30
     c3a:	08 95       	ret

00000c3c <__fixsfdi>:
     c3c:	be e3       	ldi	r27, 0x3E	; 62
     c3e:	04 d0       	rcall	.+8      	; 0xc48 <__fixunssfdi+0x2>
     c40:	08 f4       	brcc	.+2      	; 0xc44 <__fixsfdi+0x8>
     c42:	90 e8       	ldi	r25, 0x80	; 128
     c44:	08 95       	ret

00000c46 <__fixunssfdi>:
     c46:	bf e3       	ldi	r27, 0x3F	; 63
     c48:	22 27       	eor	r18, r18
     c4a:	33 27       	eor	r19, r19
     c4c:	a9 01       	movw	r20, r18
     c4e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fp_splitA>
     c52:	60 f1       	brcs	.+88     	; 0xcac <__fixunssfdi+0x66>
     c54:	9f 57       	subi	r25, 0x7F	; 127
     c56:	48 f1       	brcs	.+82     	; 0xcaa <__fixunssfdi+0x64>
     c58:	b9 17       	cp	r27, r25
     c5a:	40 f1       	brcs	.+80     	; 0xcac <__fixunssfdi+0x66>
     c5c:	bf e3       	ldi	r27, 0x3F	; 63
     c5e:	b9 1b       	sub	r27, r25
     c60:	99 27       	eor	r25, r25
     c62:	b8 50       	subi	r27, 0x08	; 8
     c64:	3a f4       	brpl	.+14     	; 0xc74 <__fixunssfdi+0x2e>
     c66:	66 0f       	add	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	88 1f       	adc	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	b3 95       	inc	r27
     c70:	d2 f3       	brmi	.-12     	; 0xc66 <__fixunssfdi+0x20>
     c72:	16 c0       	rjmp	.+44     	; 0xca0 <__fixunssfdi+0x5a>
     c74:	b8 50       	subi	r27, 0x08	; 8
     c76:	4a f0       	brmi	.+18     	; 0xc8a <__fixunssfdi+0x44>
     c78:	23 2f       	mov	r18, r19
     c7a:	34 2f       	mov	r19, r20
     c7c:	45 2f       	mov	r20, r21
     c7e:	56 2f       	mov	r21, r22
     c80:	67 2f       	mov	r22, r23
     c82:	78 2f       	mov	r23, r24
     c84:	88 27       	eor	r24, r24
     c86:	b8 50       	subi	r27, 0x08	; 8
     c88:	ba f7       	brpl	.-18     	; 0xc78 <__fixunssfdi+0x32>
     c8a:	b8 5f       	subi	r27, 0xF8	; 248
     c8c:	49 f0       	breq	.+18     	; 0xca0 <__fixunssfdi+0x5a>
     c8e:	86 95       	lsr	r24
     c90:	77 95       	ror	r23
     c92:	67 95       	ror	r22
     c94:	57 95       	ror	r21
     c96:	47 95       	ror	r20
     c98:	37 95       	ror	r19
     c9a:	27 95       	ror	r18
     c9c:	ba 95       	dec	r27
     c9e:	b9 f7       	brne	.-18     	; 0xc8e <__fixunssfdi+0x48>
     ca0:	16 f4       	brtc	.+4      	; 0xca6 <__fixunssfdi+0x60>
     ca2:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fp_negdi>
     ca6:	88 94       	clc
     ca8:	08 95       	ret
     caa:	88 94       	clc
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	cb 01       	movw	r24, r22
     cb2:	08 95       	ret

00000cb4 <__floatunsisf>:
     cb4:	e8 94       	clt
     cb6:	09 c0       	rjmp	.+18     	; 0xcca <__floatsisf+0x12>

00000cb8 <__floatsisf>:
     cb8:	97 fb       	bst	r25, 7
     cba:	3e f4       	brtc	.+14     	; 0xcca <__floatsisf+0x12>
     cbc:	90 95       	com	r25
     cbe:	80 95       	com	r24
     cc0:	70 95       	com	r23
     cc2:	61 95       	neg	r22
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	99 23       	and	r25, r25
     ccc:	a9 f0       	breq	.+42     	; 0xcf8 <__floatsisf+0x40>
     cce:	f9 2f       	mov	r31, r25
     cd0:	96 e9       	ldi	r25, 0x96	; 150
     cd2:	bb 27       	eor	r27, r27
     cd4:	93 95       	inc	r25
     cd6:	f6 95       	lsr	r31
     cd8:	87 95       	ror	r24
     cda:	77 95       	ror	r23
     cdc:	67 95       	ror	r22
     cde:	b7 95       	ror	r27
     ce0:	f1 11       	cpse	r31, r1
     ce2:	f8 cf       	rjmp	.-16     	; 0xcd4 <__floatsisf+0x1c>
     ce4:	fa f4       	brpl	.+62     	; 0xd24 <__floatsisf+0x6c>
     ce6:	bb 0f       	add	r27, r27
     ce8:	11 f4       	brne	.+4      	; 0xcee <__floatsisf+0x36>
     cea:	60 ff       	sbrs	r22, 0
     cec:	1b c0       	rjmp	.+54     	; 0xd24 <__floatsisf+0x6c>
     cee:	6f 5f       	subi	r22, 0xFF	; 255
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	8f 4f       	sbci	r24, 0xFF	; 255
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	16 c0       	rjmp	.+44     	; 0xd24 <__floatsisf+0x6c>
     cf8:	88 23       	and	r24, r24
     cfa:	11 f0       	breq	.+4      	; 0xd00 <__floatsisf+0x48>
     cfc:	96 e9       	ldi	r25, 0x96	; 150
     cfe:	11 c0       	rjmp	.+34     	; 0xd22 <__floatsisf+0x6a>
     d00:	77 23       	and	r23, r23
     d02:	21 f0       	breq	.+8      	; 0xd0c <__floatsisf+0x54>
     d04:	9e e8       	ldi	r25, 0x8E	; 142
     d06:	87 2f       	mov	r24, r23
     d08:	76 2f       	mov	r23, r22
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <__floatsisf+0x5e>
     d0c:	66 23       	and	r22, r22
     d0e:	71 f0       	breq	.+28     	; 0xd2c <__floatsisf+0x74>
     d10:	96 e8       	ldi	r25, 0x86	; 134
     d12:	86 2f       	mov	r24, r22
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	2a f0       	brmi	.+10     	; 0xd24 <__floatsisf+0x6c>
     d1a:	9a 95       	dec	r25
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 1f       	adc	r24, r24
     d22:	da f7       	brpl	.-10     	; 0xd1a <__floatsisf+0x62>
     d24:	88 0f       	add	r24, r24
     d26:	96 95       	lsr	r25
     d28:	87 95       	ror	r24
     d2a:	97 f9       	bld	r25, 7
     d2c:	08 95       	ret

00000d2e <__fp_cmp>:
     d2e:	99 0f       	add	r25, r25
     d30:	00 08       	sbc	r0, r0
     d32:	55 0f       	add	r21, r21
     d34:	aa 0b       	sbc	r26, r26
     d36:	e0 e8       	ldi	r30, 0x80	; 128
     d38:	fe ef       	ldi	r31, 0xFE	; 254
     d3a:	16 16       	cp	r1, r22
     d3c:	17 06       	cpc	r1, r23
     d3e:	e8 07       	cpc	r30, r24
     d40:	f9 07       	cpc	r31, r25
     d42:	c0 f0       	brcs	.+48     	; 0xd74 <__fp_cmp+0x46>
     d44:	12 16       	cp	r1, r18
     d46:	13 06       	cpc	r1, r19
     d48:	e4 07       	cpc	r30, r20
     d4a:	f5 07       	cpc	r31, r21
     d4c:	98 f0       	brcs	.+38     	; 0xd74 <__fp_cmp+0x46>
     d4e:	62 1b       	sub	r22, r18
     d50:	73 0b       	sbc	r23, r19
     d52:	84 0b       	sbc	r24, r20
     d54:	95 0b       	sbc	r25, r21
     d56:	39 f4       	brne	.+14     	; 0xd66 <__fp_cmp+0x38>
     d58:	0a 26       	eor	r0, r26
     d5a:	61 f0       	breq	.+24     	; 0xd74 <__fp_cmp+0x46>
     d5c:	23 2b       	or	r18, r19
     d5e:	24 2b       	or	r18, r20
     d60:	25 2b       	or	r18, r21
     d62:	21 f4       	brne	.+8      	; 0xd6c <__fp_cmp+0x3e>
     d64:	08 95       	ret
     d66:	0a 26       	eor	r0, r26
     d68:	09 f4       	brne	.+2      	; 0xd6c <__fp_cmp+0x3e>
     d6a:	a1 40       	sbci	r26, 0x01	; 1
     d6c:	a6 95       	lsr	r26
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	81 1d       	adc	r24, r1
     d72:	81 1d       	adc	r24, r1
     d74:	08 95       	ret

00000d76 <__fp_inf>:
     d76:	97 f9       	bld	r25, 7
     d78:	9f 67       	ori	r25, 0x7F	; 127
     d7a:	80 e8       	ldi	r24, 0x80	; 128
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	08 95       	ret

00000d82 <__fp_nan>:
     d82:	9f ef       	ldi	r25, 0xFF	; 255
     d84:	80 ec       	ldi	r24, 0xC0	; 192
     d86:	08 95       	ret

00000d88 <__fp_negdi>:
     d88:	90 95       	com	r25
     d8a:	80 95       	com	r24
     d8c:	70 95       	com	r23
     d8e:	60 95       	com	r22
     d90:	50 95       	com	r21
     d92:	40 95       	com	r20
     d94:	30 95       	com	r19
     d96:	21 95       	neg	r18
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	4f 4f       	sbci	r20, 0xFF	; 255
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	6f 4f       	sbci	r22, 0xFF	; 255
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	8f 4f       	sbci	r24, 0xFF	; 255
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	08 95       	ret

00000da8 <__fp_pscA>:
     da8:	00 24       	eor	r0, r0
     daa:	0a 94       	dec	r0
     dac:	16 16       	cp	r1, r22
     dae:	17 06       	cpc	r1, r23
     db0:	18 06       	cpc	r1, r24
     db2:	09 06       	cpc	r0, r25
     db4:	08 95       	ret

00000db6 <__fp_pscB>:
     db6:	00 24       	eor	r0, r0
     db8:	0a 94       	dec	r0
     dba:	12 16       	cp	r1, r18
     dbc:	13 06       	cpc	r1, r19
     dbe:	14 06       	cpc	r1, r20
     dc0:	05 06       	cpc	r0, r21
     dc2:	08 95       	ret

00000dc4 <__fp_round>:
     dc4:	09 2e       	mov	r0, r25
     dc6:	03 94       	inc	r0
     dc8:	00 0c       	add	r0, r0
     dca:	11 f4       	brne	.+4      	; 0xdd0 <__fp_round+0xc>
     dcc:	88 23       	and	r24, r24
     dce:	52 f0       	brmi	.+20     	; 0xde4 <__fp_round+0x20>
     dd0:	bb 0f       	add	r27, r27
     dd2:	40 f4       	brcc	.+16     	; 0xde4 <__fp_round+0x20>
     dd4:	bf 2b       	or	r27, r31
     dd6:	11 f4       	brne	.+4      	; 0xddc <__fp_round+0x18>
     dd8:	60 ff       	sbrs	r22, 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__fp_round+0x20>
     ddc:	6f 5f       	subi	r22, 0xFF	; 255
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	8f 4f       	sbci	r24, 0xFF	; 255
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	08 95       	ret

00000de6 <__fp_split3>:
     de6:	57 fd       	sbrc	r21, 7
     de8:	90 58       	subi	r25, 0x80	; 128
     dea:	44 0f       	add	r20, r20
     dec:	55 1f       	adc	r21, r21
     dee:	59 f0       	breq	.+22     	; 0xe06 <__fp_splitA+0x10>
     df0:	5f 3f       	cpi	r21, 0xFF	; 255
     df2:	71 f0       	breq	.+28     	; 0xe10 <__fp_splitA+0x1a>
     df4:	47 95       	ror	r20

00000df6 <__fp_splitA>:
     df6:	88 0f       	add	r24, r24
     df8:	97 fb       	bst	r25, 7
     dfa:	99 1f       	adc	r25, r25
     dfc:	61 f0       	breq	.+24     	; 0xe16 <__fp_splitA+0x20>
     dfe:	9f 3f       	cpi	r25, 0xFF	; 255
     e00:	79 f0       	breq	.+30     	; 0xe20 <__fp_splitA+0x2a>
     e02:	87 95       	ror	r24
     e04:	08 95       	ret
     e06:	12 16       	cp	r1, r18
     e08:	13 06       	cpc	r1, r19
     e0a:	14 06       	cpc	r1, r20
     e0c:	55 1f       	adc	r21, r21
     e0e:	f2 cf       	rjmp	.-28     	; 0xdf4 <__fp_split3+0xe>
     e10:	46 95       	lsr	r20
     e12:	f1 df       	rcall	.-30     	; 0xdf6 <__fp_splitA>
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <__fp_splitA+0x30>
     e16:	16 16       	cp	r1, r22
     e18:	17 06       	cpc	r1, r23
     e1a:	18 06       	cpc	r1, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	f1 cf       	rjmp	.-30     	; 0xe02 <__fp_splitA+0xc>
     e20:	86 95       	lsr	r24
     e22:	71 05       	cpc	r23, r1
     e24:	61 05       	cpc	r22, r1
     e26:	08 94       	sec
     e28:	08 95       	ret

00000e2a <__fp_zero>:
     e2a:	e8 94       	clt

00000e2c <__fp_szero>:
     e2c:	bb 27       	eor	r27, r27
     e2e:	66 27       	eor	r22, r22
     e30:	77 27       	eor	r23, r23
     e32:	cb 01       	movw	r24, r22
     e34:	97 f9       	bld	r25, 7
     e36:	08 95       	ret

00000e38 <__mulsf3>:
     e38:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__mulsf3x>
     e3c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_round>
     e40:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_pscA>
     e44:	38 f0       	brcs	.+14     	; 0xe54 <__mulsf3+0x1c>
     e46:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_pscB>
     e4a:	20 f0       	brcs	.+8      	; 0xe54 <__mulsf3+0x1c>
     e4c:	95 23       	and	r25, r21
     e4e:	11 f0       	breq	.+4      	; 0xe54 <__mulsf3+0x1c>
     e50:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_inf>
     e54:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__fp_nan>
     e58:	11 24       	eor	r1, r1
     e5a:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_szero>

00000e5e <__mulsf3x>:
     e5e:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_split3>
     e62:	70 f3       	brcs	.-36     	; 0xe40 <__mulsf3+0x8>

00000e64 <__mulsf3_pse>:
     e64:	95 9f       	mul	r25, r21
     e66:	c1 f3       	breq	.-16     	; 0xe58 <__mulsf3+0x20>
     e68:	95 0f       	add	r25, r21
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	55 1f       	adc	r21, r21
     e6e:	62 9f       	mul	r22, r18
     e70:	f0 01       	movw	r30, r0
     e72:	72 9f       	mul	r23, r18
     e74:	bb 27       	eor	r27, r27
     e76:	f0 0d       	add	r31, r0
     e78:	b1 1d       	adc	r27, r1
     e7a:	63 9f       	mul	r22, r19
     e7c:	aa 27       	eor	r26, r26
     e7e:	f0 0d       	add	r31, r0
     e80:	b1 1d       	adc	r27, r1
     e82:	aa 1f       	adc	r26, r26
     e84:	64 9f       	mul	r22, r20
     e86:	66 27       	eor	r22, r22
     e88:	b0 0d       	add	r27, r0
     e8a:	a1 1d       	adc	r26, r1
     e8c:	66 1f       	adc	r22, r22
     e8e:	82 9f       	mul	r24, r18
     e90:	22 27       	eor	r18, r18
     e92:	b0 0d       	add	r27, r0
     e94:	a1 1d       	adc	r26, r1
     e96:	62 1f       	adc	r22, r18
     e98:	73 9f       	mul	r23, r19
     e9a:	b0 0d       	add	r27, r0
     e9c:	a1 1d       	adc	r26, r1
     e9e:	62 1f       	adc	r22, r18
     ea0:	83 9f       	mul	r24, r19
     ea2:	a0 0d       	add	r26, r0
     ea4:	61 1d       	adc	r22, r1
     ea6:	22 1f       	adc	r18, r18
     ea8:	74 9f       	mul	r23, r20
     eaa:	33 27       	eor	r19, r19
     eac:	a0 0d       	add	r26, r0
     eae:	61 1d       	adc	r22, r1
     eb0:	23 1f       	adc	r18, r19
     eb2:	84 9f       	mul	r24, r20
     eb4:	60 0d       	add	r22, r0
     eb6:	21 1d       	adc	r18, r1
     eb8:	82 2f       	mov	r24, r18
     eba:	76 2f       	mov	r23, r22
     ebc:	6a 2f       	mov	r22, r26
     ebe:	11 24       	eor	r1, r1
     ec0:	9f 57       	subi	r25, 0x7F	; 127
     ec2:	50 40       	sbci	r21, 0x00	; 0
     ec4:	9a f0       	brmi	.+38     	; 0xeec <__mulsf3_pse+0x88>
     ec6:	f1 f0       	breq	.+60     	; 0xf04 <__mulsf3_pse+0xa0>
     ec8:	88 23       	and	r24, r24
     eca:	4a f0       	brmi	.+18     	; 0xede <__mulsf3_pse+0x7a>
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	bb 1f       	adc	r27, r27
     ed2:	66 1f       	adc	r22, r22
     ed4:	77 1f       	adc	r23, r23
     ed6:	88 1f       	adc	r24, r24
     ed8:	91 50       	subi	r25, 0x01	; 1
     eda:	50 40       	sbci	r21, 0x00	; 0
     edc:	a9 f7       	brne	.-22     	; 0xec8 <__mulsf3_pse+0x64>
     ede:	9e 3f       	cpi	r25, 0xFE	; 254
     ee0:	51 05       	cpc	r21, r1
     ee2:	80 f0       	brcs	.+32     	; 0xf04 <__mulsf3_pse+0xa0>
     ee4:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_inf>
     ee8:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_szero>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	e4 f3       	brlt	.-8      	; 0xee8 <__mulsf3_pse+0x84>
     ef0:	98 3e       	cpi	r25, 0xE8	; 232
     ef2:	d4 f3       	brlt	.-12     	; 0xee8 <__mulsf3_pse+0x84>
     ef4:	86 95       	lsr	r24
     ef6:	77 95       	ror	r23
     ef8:	67 95       	ror	r22
     efa:	b7 95       	ror	r27
     efc:	f7 95       	ror	r31
     efe:	e7 95       	ror	r30
     f00:	9f 5f       	subi	r25, 0xFF	; 255
     f02:	c1 f7       	brne	.-16     	; 0xef4 <__mulsf3_pse+0x90>
     f04:	fe 2b       	or	r31, r30
     f06:	88 0f       	add	r24, r24
     f08:	91 1d       	adc	r25, r1
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	97 f9       	bld	r25, 7
     f10:	08 95       	ret

00000f12 <__umoddi3>:
     f12:	68 94       	set
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <__udivdi3_umoddi3>

00000f16 <__udivdi3>:
     f16:	e8 94       	clt

00000f18 <__udivdi3_umoddi3>:
     f18:	8f 92       	push	r8
     f1a:	9f 92       	push	r9
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	0e 94 97 07 	call	0xf2e	; 0xf2e <__udivmod64>
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	9f 90       	pop	r9
     f2a:	8f 90       	pop	r8
     f2c:	08 95       	ret

00000f2e <__udivmod64>:
     f2e:	88 24       	eor	r8, r8
     f30:	99 24       	eor	r9, r9
     f32:	f4 01       	movw	r30, r8
     f34:	e4 01       	movw	r28, r8
     f36:	b0 e4       	ldi	r27, 0x40	; 64
     f38:	9f 93       	push	r25
     f3a:	aa 27       	eor	r26, r26
     f3c:	9a 15       	cp	r25, r10
     f3e:	8b 04       	cpc	r8, r11
     f40:	9c 04       	cpc	r9, r12
     f42:	ed 05       	cpc	r30, r13
     f44:	fe 05       	cpc	r31, r14
     f46:	cf 05       	cpc	r28, r15
     f48:	d0 07       	cpc	r29, r16
     f4a:	a1 07       	cpc	r26, r17
     f4c:	98 f4       	brcc	.+38     	; 0xf74 <__udivmod64+0x46>
     f4e:	ad 2f       	mov	r26, r29
     f50:	dc 2f       	mov	r29, r28
     f52:	cf 2f       	mov	r28, r31
     f54:	fe 2f       	mov	r31, r30
     f56:	e9 2d       	mov	r30, r9
     f58:	98 2c       	mov	r9, r8
     f5a:	89 2e       	mov	r8, r25
     f5c:	98 2f       	mov	r25, r24
     f5e:	87 2f       	mov	r24, r23
     f60:	76 2f       	mov	r23, r22
     f62:	65 2f       	mov	r22, r21
     f64:	54 2f       	mov	r21, r20
     f66:	43 2f       	mov	r20, r19
     f68:	32 2f       	mov	r19, r18
     f6a:	22 27       	eor	r18, r18
     f6c:	b8 50       	subi	r27, 0x08	; 8
     f6e:	31 f7       	brne	.-52     	; 0xf3c <__udivmod64+0xe>
     f70:	bf 91       	pop	r27
     f72:	27 c0       	rjmp	.+78     	; 0xfc2 <__udivmod64+0x94>
     f74:	1b 2e       	mov	r1, r27
     f76:	bf 91       	pop	r27
     f78:	bb 27       	eor	r27, r27
     f7a:	22 0f       	add	r18, r18
     f7c:	33 1f       	adc	r19, r19
     f7e:	44 1f       	adc	r20, r20
     f80:	55 1f       	adc	r21, r21
     f82:	66 1f       	adc	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	88 1c       	adc	r8, r8
     f8c:	99 1c       	adc	r9, r9
     f8e:	ee 1f       	adc	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	cc 1f       	adc	r28, r28
     f94:	dd 1f       	adc	r29, r29
     f96:	aa 1f       	adc	r26, r26
     f98:	bb 1f       	adc	r27, r27
     f9a:	8a 14       	cp	r8, r10
     f9c:	9b 04       	cpc	r9, r11
     f9e:	ec 05       	cpc	r30, r12
     fa0:	fd 05       	cpc	r31, r13
     fa2:	ce 05       	cpc	r28, r14
     fa4:	df 05       	cpc	r29, r15
     fa6:	a0 07       	cpc	r26, r16
     fa8:	b1 07       	cpc	r27, r17
     faa:	48 f0       	brcs	.+18     	; 0xfbe <__udivmod64+0x90>
     fac:	8a 18       	sub	r8, r10
     fae:	9b 08       	sbc	r9, r11
     fb0:	ec 09       	sbc	r30, r12
     fb2:	fd 09       	sbc	r31, r13
     fb4:	ce 09       	sbc	r28, r14
     fb6:	df 09       	sbc	r29, r15
     fb8:	a0 0b       	sbc	r26, r16
     fba:	b1 0b       	sbc	r27, r17
     fbc:	21 60       	ori	r18, 0x01	; 1
     fbe:	1a 94       	dec	r1
     fc0:	e1 f6       	brne	.-72     	; 0xf7a <__udivmod64+0x4c>
     fc2:	2e f4       	brtc	.+10     	; 0xfce <__udivmod64+0xa0>
     fc4:	94 01       	movw	r18, r8
     fc6:	af 01       	movw	r20, r30
     fc8:	be 01       	movw	r22, r28
     fca:	cd 01       	movw	r24, r26
     fcc:	00 0c       	add	r0, r0
     fce:	08 95       	ret

00000fd0 <__negdi2>:
     fd0:	60 95       	com	r22
     fd2:	70 95       	com	r23
     fd4:	80 95       	com	r24
     fd6:	90 95       	com	r25
     fd8:	30 95       	com	r19
     fda:	40 95       	com	r20
     fdc:	50 95       	com	r21
     fde:	21 95       	neg	r18
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	4f 4f       	sbci	r20, 0xFF	; 255
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	6f 4f       	sbci	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8f 4f       	sbci	r24, 0xFF	; 255
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	08 95       	ret

00000ff0 <__ashldi3>:
     ff0:	0f 93       	push	r16
     ff2:	08 30       	cpi	r16, 0x08	; 8
     ff4:	90 f0       	brcs	.+36     	; 0x101a <__ashldi3+0x2a>
     ff6:	98 2f       	mov	r25, r24
     ff8:	87 2f       	mov	r24, r23
     ffa:	76 2f       	mov	r23, r22
     ffc:	65 2f       	mov	r22, r21
     ffe:	54 2f       	mov	r21, r20
    1000:	43 2f       	mov	r20, r19
    1002:	32 2f       	mov	r19, r18
    1004:	22 27       	eor	r18, r18
    1006:	08 50       	subi	r16, 0x08	; 8
    1008:	f4 cf       	rjmp	.-24     	; 0xff2 <__ashldi3+0x2>
    100a:	22 0f       	add	r18, r18
    100c:	33 1f       	adc	r19, r19
    100e:	44 1f       	adc	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	66 1f       	adc	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 95       	dec	r16
    101c:	b2 f7       	brpl	.-20     	; 0x100a <__ashldi3+0x1a>
    101e:	0f 91       	pop	r16
    1020:	08 95       	ret

00001022 <__adddi3>:
    1022:	2a 0d       	add	r18, r10
    1024:	3b 1d       	adc	r19, r11
    1026:	4c 1d       	adc	r20, r12
    1028:	5d 1d       	adc	r21, r13
    102a:	6e 1d       	adc	r22, r14
    102c:	7f 1d       	adc	r23, r15
    102e:	80 1f       	adc	r24, r16
    1030:	91 1f       	adc	r25, r17
    1032:	08 95       	ret

00001034 <__cmpdi2_s8>:
    1034:	00 24       	eor	r0, r0
    1036:	a7 fd       	sbrc	r26, 7
    1038:	00 94       	com	r0
    103a:	2a 17       	cp	r18, r26
    103c:	30 05       	cpc	r19, r0
    103e:	40 05       	cpc	r20, r0
    1040:	50 05       	cpc	r21, r0
    1042:	60 05       	cpc	r22, r0
    1044:	70 05       	cpc	r23, r0
    1046:	80 05       	cpc	r24, r0
    1048:	90 05       	cpc	r25, r0
    104a:	08 95       	ret

0000104c <_exit>:
    104c:	f8 94       	cli

0000104e <__stop_program>:
    104e:	ff cf       	rjmp	.-2      	; 0x104e <__stop_program>
